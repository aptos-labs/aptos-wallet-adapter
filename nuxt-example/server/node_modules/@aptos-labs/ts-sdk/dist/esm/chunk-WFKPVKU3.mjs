import{a as d}from"./chunk-QUJM5W4L.mjs";import{b as h,d as u}from"./chunk-7OUPEQRN.mjs";import{a as E}from"./chunk-A3VO773Q.mjs";import{a as g}from"./chunk-TTY5GFMN.mjs";var o=class o extends d{constructor(t){let{publicKeys:e,threshold:r}=t;if(super({publicKeys:e}),e.length>o.MAX_KEYS||e.length<o.MIN_KEYS)throw new Error(`Must have between ${o.MIN_KEYS} and ${o.MAX_KEYS} public keys, inclusive`);if(r<o.MIN_THRESHOLD||r>e.length)throw new Error(`Threshold must be between ${o.MIN_THRESHOLD} and ${e.length}, inclusive`);this.publicKeys=e,this.threshold=r}verifySignature(t){let{message:e,signature:r}=t;if(!(r instanceof y))return!1;let s=[];for(let i=0;i<4;i+=1)for(let n=0;n<8;n+=1)if((r.bitmap[i]&1<<7-n)!==0){let l=i*8+n;s.push(l)}if(s.length!==r.signatures.length)throw new Error("Bitmap and signatures length mismatch");if(s.length<this.threshold)throw new Error("Not enough signatures");for(let i=0;i<s.length;i+=1)if(!this.publicKeys[s[i]].verifySignature({message:e,signature:r.signatures[i]}))return!1;return!0}authKey(){return g.fromSchemeAndBytes({scheme:1,input:this.toUint8Array()})}toUint8Array(){let t=new Uint8Array(this.publicKeys.length*h.LENGTH+1);return this.publicKeys.forEach((e,r)=>{t.set(e.toUint8Array(),r*h.LENGTH)}),t[this.publicKeys.length*h.LENGTH]=this.threshold,t}serialize(t){t.serializeBytes(this.toUint8Array())}static deserialize(t){let e=t.deserializeBytes(),r=e[e.length-1],s=[];for(let i=0;i<e.length-1;i+=h.LENGTH){let n=i;s.push(new h(e.subarray(n,n+h.LENGTH)))}return new o({publicKeys:s,threshold:r})}getIndex(t){return super.getIndex(t)}};o.MAX_KEYS=32,o.MIN_KEYS=2,o.MIN_THRESHOLD=1;var m=o,a=class a extends E{constructor(t){super();let{signatures:e,bitmap:r}=t;if(e.length>a.MAX_SIGNATURES_SUPPORTED)throw new Error(`The number of signatures cannot be greater than ${a.MAX_SIGNATURES_SUPPORTED}`);if(this.signatures=e,!(r instanceof Uint8Array))this.bitmap=a.createBitmap({bits:r});else{if(r.length!==a.BITMAP_LEN)throw new Error(`"bitmap" length should be ${a.BITMAP_LEN}`);this.bitmap=r}}toUint8Array(){let t=new Uint8Array(this.signatures.length*u.LENGTH+a.BITMAP_LEN);return this.signatures.forEach((e,r)=>{t.set(e.toUint8Array(),r*u.LENGTH)}),t.set(this.bitmap,this.signatures.length*u.LENGTH),t}serialize(t){t.serializeBytes(this.toUint8Array())}static deserialize(t){let e=t.deserializeBytes(),r=e.subarray(e.length-4),s=[];for(let i=0;i<e.length-r.length;i+=u.LENGTH){let n=i;s.push(new u(e.subarray(n,n+u.LENGTH)))}return new a({signatures:s,bitmap:r})}static createBitmap(t){let{bits:e}=t,r=128,s=new Uint8Array([0,0,0,0]),i=new Set;return e.forEach((n,c)=>{if(n>=a.MAX_SIGNATURES_SUPPORTED)throw new Error(`Cannot have a signature larger than ${a.MAX_SIGNATURES_SUPPORTED-1}.`);if(i.has(n))throw new Error("Duplicate bits detected.");if(c>0&&n<=e[c-1])throw new Error("The bits need to be sorted in ascending order.");i.add(n);let l=Math.floor(n/8),b=s[l];b|=r>>n%8,s[l]=b}),s}};a.MAX_SIGNATURES_SUPPORTED=32,a.BITMAP_LEN=4;var y=a;export{m as a,y as b};
//# sourceMappingURL=chunk-WFKPVKU3.mjs.map