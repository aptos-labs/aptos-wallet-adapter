import{a as u,c as d,f as p}from"./chunk-XRVZAEQO.mjs";import{j as l}from"./chunk-BHVSIRNF.mjs";import{ScriptComposerWasm as m}from"@aptos-labs/script-composer-pack";var g=class o{constructor(t){this.config=t,this.builder=void 0}async init(){if(!o.transactionComposer){let t=await import("@aptos-labs/script-composer-pack"),{TransactionComposer:e,initSync:n}=t;m.isInitialized||m.init(),n({module:m.wasm}),o.transactionComposer=e}this.builder=o.transactionComposer.single_signer()}async addBatchedCalls(t){let{moduleAddress:e,moduleName:n,functionName:a}=l(t.function),c=this.config.getRequestUrl("Fullnode");await this.builder.load_module(c,`${e}::${n}`),t.typeArguments!==void 0&&await Promise.all(t.typeArguments.map(i=>this.builder.load_type_tag(c,i.toString())));let r=u(t.typeArguments),s=await d(e,n,a,this.config);if(r.length!==s.typeParameters.length)throw new Error(`Type argument count mismatch, expected ${s.typeParameters.length}, received ${r.length}`);let f=t.functionArguments.map((i,h)=>p(i,a,s,h,r));return this.builder.add_batched_call(`${e}::${n}`,a,r.map(i=>i.toString()),f)}build(){return this.builder.generate_batched_calls(!0)}};export{g as a};
//# sourceMappingURL=chunk-FJ5J7CVW.mjs.map