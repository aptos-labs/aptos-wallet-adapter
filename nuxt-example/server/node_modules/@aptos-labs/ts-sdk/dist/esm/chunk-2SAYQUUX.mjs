import{d as g}from"./chunk-P5CM4C2G.mjs";import{c as u}from"./chunk-BPHCRTHD.mjs";import{b as d}from"./chunk-WFKPVKU3.mjs";import{b as c}from"./chunk-LQOSHBB7.mjs";var l=class{constructor(t){this.signingScheme=1;let{signers:e,publicKey:r,address:a}=t;if(this.publicKey=r,this.accountAddress=a?c.from(a):this.publicKey.authKey().derivedAddress(),r.threshold>e.length)throw new Error(`Not enough signers provided to satisfy the required signatures. Need ${r.threshold} signers, but only ${e.length} provided`);if(r.threshold<e.length)throw new Error(`More signers provided than required. Need ${r.threshold} signers, but ${e.length} provided`);let n=[];for(let i of e)n.push(this.publicKey.getIndex(i.publicKey()));let s=e.map((i,o)=>[i,n[o]]);s.sort((i,o)=>i[1]-o[1]),this.signers=s.map(i=>i[0]),this.signerIndices=s.map(i=>i[1]),this.signaturesBitmap=this.publicKey.createBitmap({bits:n})}verifySignature(t){return this.publicKey.verifySignature(t)}signWithAuthenticator(t){return new u(this.publicKey,this.sign(t))}signTransactionWithAuthenticator(t){return new u(this.publicKey,this.signTransaction(t))}sign(t){let e=[];for(let r of this.signers)e.push(r.sign(t));return new d({signatures:e,bitmap:this.signaturesBitmap})}signTransaction(t){return this.sign(g(t))}};export{l as a};
//# sourceMappingURL=chunk-2SAYQUUX.mjs.map