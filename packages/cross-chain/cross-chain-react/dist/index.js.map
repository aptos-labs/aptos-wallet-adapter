{"version":3,"sources":["../src/index.tsx","../src/WalletProvider.tsx","../src/useWallet.tsx"],"sourcesContent":["export * from \"@aptos-labs/cross-chain-core\";\nexport * from \"./WalletProvider\";\nexport * from \"./useWallet\";\n","import { FC, ReactNode, useEffect, useState } from \"react\";\nimport { WalletContext } from \"./useWallet\";\nimport {\n  Chain,\n  CrossChainCore,\n  CrossChainDappConfig,\n  Network,\n  WormholeQuoteResponse,\n  WormholeInitiateTransferResponse,\n  CrossChainProvider,\n  AptosAccount,\n} from \"@aptos-labs/cross-chain-core\";\nimport { AccountInfo, NetworkInfo } from \"@aptos-labs/wallet-standard\";\nimport { getSolanaStandardWallets } from \"@aptos-labs/wallet-adapter-aggregator-solana\";\nimport { AdapterWallet } from \"@aptos-labs/wallet-adapter-aggregator-core\";\nimport { fetchEthereumWallets as fetchEthereumWalletsAggregator } from \"@aptos-labs/wallet-adapter-aggregator-eip6963\";\nimport { getAptosWallets as getAptosStandardWallets } from \"@aptos-labs/wallet-adapter-aggregator-aptos\";\n\nexport interface AptosCrossChainWalletProviderProps {\n  children: ReactNode;\n  dappConfig: CrossChainDappConfig;\n  disableTelemetry?: boolean;\n  onError?: (error: any) => void;\n}\n\nexport type { AdapterWallet };\n\nexport type QuoteResponse = WormholeQuoteResponse;\n\nexport type InitiateTransferResponse = WormholeInitiateTransferResponse;\n\nconst initialState: {\n  connected: boolean;\n  account: AccountInfo | null;\n  wallet: AdapterWallet | null;\n  sourceChain: Chain | null;\n  setSourceChain: (chain: Chain) => void;\n} = {\n  connected: false,\n  account: null,\n  wallet: null,\n  sourceChain: null,\n  setSourceChain: () => {},\n};\n\nexport const AptosCrossChainWalletProvider: FC<\n  AptosCrossChainWalletProviderProps\n> = ({ children, dappConfig, disableTelemetry, onError }) => {\n  const [{ connected, wallet, account, sourceChain }, setState] =\n    useState(initialState);\n\n  const [provider, setProvider] = useState<CrossChainProvider>();\n\n  const setSourceChain = (chain: Chain) => {\n    setState((prev) => ({ ...prev, sourceChain: chain }));\n  };\n\n  const [crossChainCore, setCrossChainCore] = useState<CrossChainCore>();\n\n  useEffect(() => {\n    const crossChainCore = new CrossChainCore({ dappConfig });\n    setCrossChainCore(crossChainCore);\n  }, []);\n\n  // TODO fix me, on first load I get an empty array\n  const getSolanaWallets = (): ReadonlyArray<AdapterWallet> => {\n    return getSolanaStandardWallets();\n  };\n\n  const getEthereumWallets = (): ReadonlyArray<AdapterWallet> => {\n    return fetchEthereumWalletsAggregator();\n  };\n\n  const getAptosWallets = (): ReadonlyArray<AdapterWallet> => {\n    //console.log(\"getAptosStandardWallets\", getAptosStandardWallets());\n    return getAptosStandardWallets();\n  };\n\n  useEffect(() => {\n    if (!wallet) return;\n\n    const handleAccountChange = (newAccount: AccountInfo | null) => {\n      setState((prev) => ({ ...prev, account: newAccount }));\n    };\n\n    const handleNetworkChange = (newNetwork: NetworkInfo | null) => {\n      //setState((prev) => ({ ...prev, sourceChain: newNetwork.name }));\n      console.log(\"handleNetworkChange not implemented\");\n    };\n\n    // Register the listener\n    wallet.on(\"accountChange\", handleAccountChange);\n    wallet.on(\"networkChange\", handleNetworkChange);\n    return () => {\n      wallet.off(\"accountChange\", handleAccountChange);\n      wallet.off(\"networkChange\", handleNetworkChange);\n    };\n  }, [wallet]);\n\n  const getQuote = async <T extends QuoteResponse>(\n    amount: string,\n    sourceChain: Chain\n  ): Promise<T> => {\n    try {\n      const provider = crossChainCore?.getProvider(\"Wormhole\");\n\n      if (!provider) {\n        throw new Error(\"Provider not found\");\n      }\n      setProvider(provider);\n\n      const quote = await provider?.getQuote({\n        amount,\n        sourceChain,\n      });\n\n      return quote;\n    } catch (error) {\n      if (onError) onError(error);\n      return Promise.reject(error);\n    }\n  };\n\n  const initiateTransfer = async (\n    sourceChain: Chain,\n    mainSigner: AptosAccount,\n    sponsorAccount?: AptosAccount | Partial<Record<Network, string>>\n  ): Promise<{ originChainTxnId: string; destinationChainTxnId: string }> => {\n    try {\n      if (!provider) {\n        throw new Error(\"Provider is not set\");\n      }\n      const { originChainTxnId, destinationChainTxnId } =\n        await provider.initiateCCTPTransfer({\n          sourceChain,\n          wallet,\n          destinationAddress:\n            \"0x38383091fdd9325e0b8ada990c474da8c7f5aa51580b65eb477885b6ce0a36b7\",\n          mainSigner,\n          sponsorAccount,\n        });\n\n      return { originChainTxnId, destinationChainTxnId };\n    } catch (error) {\n      if (onError) onError(error);\n      return Promise.reject(error);\n    }\n  };\n\n  const connect = async (wallet: AdapterWallet): Promise<void> => {\n    try {\n      const response = await wallet.connect();\n      console.log(\"WalletProvider connect response\", response);\n      setState((state) => ({\n        ...state,\n        connected: true,\n        wallet: wallet,\n        account: response,\n      }));\n    } catch (error) {\n      if (onError) onError(error);\n      return Promise.reject(error);\n    }\n  };\n\n  const disconnect = async () => {\n    try {\n      await wallet?.disconnect();\n      setState((state) => ({\n        ...state,\n        connected: false,\n        wallet: null,\n      }));\n    } catch (error) {\n      if (onError) onError(error);\n      return Promise.reject(error);\n    }\n  };\n  return (\n    <WalletContext.Provider\n      value={{\n        connected,\n        account,\n        isLoading: false,\n        getSolanaWallets,\n        getEthereumWallets,\n        getAptosWallets,\n        connect,\n        disconnect,\n        wallet,\n        getQuote,\n        initiateTransfer,\n        sourceChain,\n        setSourceChain,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  );\n};\n","import {\n  Chain,\n  Network,\n  UsdcBalance,\n  WormholeQuoteResponse,\n  AptosAccount,\n} from \"@aptos-labs/cross-chain-core\";\nimport { AdapterWallet } from \"@aptos-labs/wallet-adapter-aggregator-core\";\nimport { AccountInfo } from \"@aptos-labs/wallet-standard\";\nimport { createContext, useContext } from \"react\";\n\nconst DEFAULT_CONTEXT = {\n  connected: false,\n};\n\nexport interface WalletContextState {\n  connected: boolean;\n  isLoading: boolean;\n  wallet: AdapterWallet | null;\n  account: AccountInfo | null;\n  getSolanaWallets: () => ReadonlyArray<AdapterWallet>;\n  getEthereumWallets: () => ReadonlyArray<AdapterWallet>;\n  getAptosWallets: () => ReadonlyArray<AdapterWallet>;\n  connect: (wallet: AdapterWallet) => Promise<void>;\n  disconnect: () => Promise<void>;\n  getQuote: (\n    amount: string,\n    sourceChain: Chain\n  ) => Promise<WormholeQuoteResponse>;\n  initiateTransfer: (\n    sourceChain: Chain,\n    mainSigner: AptosAccount,\n    sponsorAccount?: AptosAccount | Partial<Record<Network, string>>\n  ) => Promise<{ originChainTxnId: string; destinationChainTxnId: string }>;\n  sourceChain: Chain | null;\n  setSourceChain: (chain: Chain) => void;\n}\n\nexport const WalletContext = createContext<WalletContextState>(\n  DEFAULT_CONTEXT as WalletContextState\n);\n\nexport function useCrossChainWallet(): WalletContextState {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"useWallet must be used within a WalletContextState\");\n  }\n  return context;\n}\n"],"mappings":"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","names":["import_react","crossChainCore","fetchEthereumWalletsAggregator","getAptosStandardWallets","sourceChain","provider","wallet"]}