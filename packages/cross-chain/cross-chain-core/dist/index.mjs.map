{"version":3,"sources":["../src/providers/wormhole/index.ts","../src/utils/logger.ts","../src/providers/wormhole/signers/AptosLocalSigner.ts","../src/providers/wormhole/signers/SolanaSigner.ts","../src/providers/wormhole/signers/EthereumSigner.ts","../src/providers/wormhole/signers/SuiSigner.ts","../src/providers/wormhole/signers/index.ts","../src/providers/wormhole/config/types.ts","../src/providers/wormhole/config/testnet/chains.ts","../src/providers/wormhole/config/testnet/tokens.ts","../src/providers/wormhole/config/mainnet/chains.ts","../src/providers/wormhole/config/mainnet/tokens.ts","../src/CrossChainCore.ts","../src/index.ts"],"sourcesContent":["import { Chain, CrossChainProvider } from \"../../CrossChainCore\";\n\nimport {\n  chainToPlatform,\n  routes,\n  TokenId,\n  Wormhole,\n  wormhole,\n  PlatformLoader,\n  TransferState,\n  AttestationReceipt,\n} from \"@wormhole-foundation/sdk\";\n\nimport aptos from \"@wormhole-foundation/sdk/aptos\";\nimport solana from \"@wormhole-foundation/sdk/solana\";\nimport evm from \"@wormhole-foundation/sdk/evm\";\nimport sui from \"@wormhole-foundation/sdk/sui\";\n\nimport { CrossChainCore } from \"../../CrossChainCore\";\nimport { logger } from \"../../utils/logger\";\nimport {\n  Account,\n  AccountAddressInput,\n  Ed25519PrivateKey,\n  Network,\n  sleep,\n} from \"@aptos-labs/ts-sdk\";\nimport { AptosLocalSigner } from \"./signers/AptosLocalSigner\";\nimport { AdapterWallet } from \"@aptos-labs/wallet-adapter-aggregator-core\";\nimport { Signer } from \"./signers\";\nimport {\n  ChainsConfig,\n  testnetChains,\n  testnetTokens,\n  mainnetChains,\n  mainnetTokens,\n  TokenConfig,\n  AptosTestnetUSDCToken,\n  AptosMainnetUSDCToken,\n  ChainConfig,\n} from \"./config\";\n\nexport type WormholeRouteResponse = routes.Route<\n  \"Mainnet\" | \"Testnet\",\n  routes.Options,\n  routes.ValidatedTransferParams<routes.Options>,\n  routes.Receipt\n>;\n\nexport type WormholeRequest = routes.RouteTransferRequest<\n  \"Mainnet\" | \"Testnet\"\n>;\n\nexport type WormholeQuoteResponse = routes.Quote<\n  routes.Options,\n  routes.ValidatedTransferParams<routes.Options>,\n  any\n>;\n\nexport interface WormholeQuoteRequest {\n  amount: string;\n  sourceChain: Chain;\n}\n\nexport interface WormholeInitiateTransferRequest {\n  sourceChain: Chain;\n  wallet: AdapterWallet;\n  destinationAddress: AccountAddressInput;\n  mainSigner: Account;\n  sponsorAccount?: Account | Partial<Record<Network, string>>;\n}\n\nexport interface WormholeInitiateTransferResponse {\n  destinationChainTxnId: string;\n  originChainTxnId: string;\n}\n\nexport interface WormholeStartTransferResponse {\n  originChainTxnId: string;\n  receipt: routes.Receipt<AttestationReceipt>;\n}\n\nexport class WormholeProvider\n  implements\n    CrossChainProvider<\n      WormholeQuoteRequest,\n      WormholeQuoteResponse,\n      WormholeInitiateTransferRequest,\n      WormholeInitiateTransferResponse\n    >\n{\n  private crossChainCore: CrossChainCore;\n\n  private _wormholeContext: Wormhole<\"Mainnet\" | \"Testnet\"> | undefined;\n\n  private wormholeRoute: WormholeRouteResponse | undefined;\n  private wormholeRequest: WormholeRequest | undefined;\n  private wormholeQuote: WormholeQuoteResponse | undefined;\n\n  readonly CHAINS: ChainsConfig = testnetChains;\n  readonly TOKENS: Record<string, TokenConfig> = testnetTokens;\n\n  readonly APTOS_TOKEN: TokenConfig = AptosTestnetUSDCToken;\n\n  constructor(core: CrossChainCore) {\n    this.crossChainCore = core;\n    if (core._dappConfig?.network === Network.MAINNET) {\n      this.CHAINS = mainnetChains;\n      this.TOKENS = mainnetTokens;\n      this.APTOS_TOKEN = AptosMainnetUSDCToken;\n    } else {\n      this.CHAINS = testnetChains;\n      this.TOKENS = testnetTokens;\n      this.APTOS_TOKEN = AptosTestnetUSDCToken;\n    }\n  }\n\n  get wormholeContext(): Wormhole<\"Mainnet\" | \"Testnet\"> | undefined {\n    return this._wormholeContext;\n  }\n\n  async setWormholeContext(sourceChain: Chain) {\n    const dappNetwork = this.crossChainCore._dappConfig?.network;\n    if (dappNetwork === Network.DEVNET) {\n      throw new Error(\"Devnet is not supported on Wormhole\");\n    }\n    if (!sourceChain) {\n      throw new Error(\"Origin chain not selected\");\n    }\n    const isMainnet = dappNetwork === Network.MAINNET;\n    const platforms: PlatformLoader<any>[] = [aptos, solana, evm];\n    const wh = await wormhole(isMainnet ? \"Mainnet\" : \"Testnet\", platforms);\n    this._wormholeContext = wh;\n  }\n\n  async getWormholeCctpRoute(sourceChain: Chain): Promise<{\n    route: WormholeRouteResponse;\n    request: WormholeRequest;\n  }> {\n    if (!this._wormholeContext) {\n      throw new Error(\"Wormhole context not initialized\");\n    }\n\n    const { sourceToken, destToken } = this.getTokenInfo(sourceChain);\n\n    const sourceContext = this._wormholeContext\n      .getPlatform(chainToPlatform(sourceChain))\n      .getChain(sourceChain);\n\n    logger.log(\"sourceContext\", sourceContext);\n\n    const destContext = this._wormholeContext\n      .getPlatform(chainToPlatform(\"Aptos\"))\n      .getChain(\"Aptos\");\n\n    logger.log(\"destContext\", destContext);\n\n    const req = await routes.RouteTransferRequest.create(\n      this._wormholeContext,\n      {\n        source: sourceToken,\n        destination: destToken,\n      },\n      sourceContext,\n      destContext\n    );\n\n    const resolver = this._wormholeContext.resolver([\n      routes.CCTPRoute, // manual CCTP\n    ]);\n\n    const route = await resolver.findRoutes(req);\n    const cctpRoute = route[0];\n\n    return { route: cctpRoute, request: req };\n  }\n\n  async getQuote(input: WormholeQuoteRequest): Promise<WormholeQuoteResponse> {\n    const { amount, sourceChain } = input;\n\n    if (!this._wormholeContext) {\n      await this.setWormholeContext(sourceChain);\n    }\n\n    const { route, request } = await this.getWormholeCctpRoute(sourceChain);\n    this.wormholeRoute = route;\n    this.wormholeRequest = request;\n\n    // TODO what is nativeGas for?\n    const transferParams = { amount, options: { nativeGas: 0 } };\n\n    const validated = await route.validate(request, transferParams);\n    if (!validated.valid) {\n      logger.log(\"invalid\", validated.valid);\n      throw validated.error;\n    }\n    const quote = await route.quote(request, validated.params);\n    if (!quote.success) {\n      logger.log(\"quote failed\", quote.success);\n      throw quote.error;\n    }\n    this.wormholeQuote = quote;\n    logger.log(\"quote\", quote);\n    return quote;\n  }\n\n  async startCCTPTransfer(\n    input: WormholeInitiateTransferRequest\n  ): Promise<WormholeStartTransferResponse> {\n    const { sourceChain, wallet, destinationAddress } = input;\n\n    if (!this._wormholeContext) {\n      await this.setWormholeContext(sourceChain);\n    }\n    if (!this.wormholeRoute || !this.wormholeRequest || !this.wormholeQuote) {\n      throw new Error(\"Wormhole route, request, or quote not initialized\");\n    }\n\n    let signerAddress: string;\n\n    const chainContext = this.getChainConfig(sourceChain).context;\n\n    const currentAccount = await wallet.getAccount();\n    if (chainContext === \"Solana\") {\n      signerAddress = currentAccount.publicKey.toString();\n    } else {\n      signerAddress = currentAccount.address;\n    }\n    logger.log(\"signerAddress\", signerAddress);\n\n    const signer = new Signer(\n      this.getChainConfig(sourceChain),\n      signerAddress,\n      {},\n      wallet\n    );\n\n    let receipt = await this.wormholeRoute.initiate(\n      this.wormholeRequest,\n      signer,\n      this.wormholeQuote,\n      Wormhole.chainAddress(\"Aptos\", destinationAddress.toString())\n    );\n\n    const originChainTxnId =\n      \"originTxs\" in receipt\n        ? receipt.originTxs[receipt.originTxs.length - 1].txid\n        : undefined;\n\n    return { originChainTxnId: originChainTxnId || \"\", receipt };\n  }\n\n  async initiateCCTPTransfer(\n    input: WormholeInitiateTransferRequest\n  ): Promise<WormholeInitiateTransferResponse> {\n    if (this.crossChainCore._dappConfig?.network === Network.DEVNET) {\n      throw new Error(\"Devnet is not supported on Wormhole\");\n    }\n    if (!this.wormholeRoute || !this.wormholeRequest || !this.wormholeQuote) {\n      throw new Error(\"Wormhole route, request, or quote not initialized\");\n    }\n    let { originChainTxnId, receipt } = await this.startCCTPTransfer(input);\n    // should come from transaction signer worker\n    const { mainSigner, sponsorAccount } = input;\n\n    logger.log(\"mainSigner\", mainSigner.accountAddress.toString());\n\n    let retries = 0;\n    const maxRetries = 5;\n    const baseDelay = 1000; // Initial delay of 1 second\n\n    while (retries < maxRetries) {\n      try {\n        for await (receipt of this.wormholeRoute.track(receipt, 120 * 1000)) {\n          if (receipt.state >= TransferState.SourceInitiated) {\n            logger.log(\"Receipt is on track \", receipt);\n\n            try {\n              const signer = new AptosLocalSigner(\n                \"Aptos\",\n                {},\n                mainSigner, // the account that signs the \"claim\" transaction\n                sponsorAccount ? sponsorAccount : undefined // the fee payer account\n              );\n\n              if (routes.isManual(this.wormholeRoute)) {\n                const circleAttestationReceipt =\n                  await this.wormholeRoute.complete(signer, receipt);\n                logger.log(\"Claim receipt: \", circleAttestationReceipt);\n                const destinationChainTxnId = signer.claimedTransactionHashes();\n                return { destinationChainTxnId, originChainTxnId };\n              } else {\n                // Should be unreachable\n                return { destinationChainTxnId: \"\", originChainTxnId };\n              }\n            } catch (e) {\n              console.error(\"Failed to claim\", e);\n              return { destinationChainTxnId: \"\", originChainTxnId };\n            }\n          }\n        }\n      } catch (e) {\n        console.error(\n          `Error tracking transfer (attempt ${retries + 1} / ${maxRetries}):`,\n          e\n        );\n        const delay = baseDelay * Math.pow(2, retries); // Exponential backoff\n        await sleep(delay);\n        retries++;\n      }\n    }\n    // Should be unreachable\n    return { destinationChainTxnId: \"\", originChainTxnId };\n  }\n\n  getChainConfig(chain: Chain): ChainConfig {\n    const chainConfig = this.CHAINS[chain as keyof typeof this.CHAINS];\n    if (!chainConfig) {\n      throw new Error(`Chain config not found for chain: ${chain}`);\n    }\n    return chainConfig;\n  }\n\n  getTokenInfo(sourceChain: Chain): {\n    sourceToken: TokenId;\n    destToken: TokenId;\n  } {\n    const sourceToken: TokenId = Wormhole.tokenId(\n      this.TOKENS[sourceChain].tokenId.chain as Chain,\n      this.TOKENS[sourceChain].tokenId.address\n    );\n\n    const destToken: TokenId = Wormhole.tokenId(\n      this.APTOS_TOKEN.tokenId.chain as Chain,\n      this.APTOS_TOKEN.tokenId.address\n    );\n\n    return { sourceToken, destToken };\n  }\n}\n","export const logger = {\n  log: (...args: any[]) => {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(...args);\n    }\n  },\n  warn: (...args: any[]) => {\n    if (process.env.NODE_ENV === \"development\") {\n      console.warn(...args);\n    }\n  },\n  error: (...args: any[]) => {\n    if (process.env.NODE_ENV === \"development\") {\n      console.error(...args);\n    }\n  },\n};\n","import {\n  AccountAuthenticator,\n  AnyRawTransaction,\n  Aptos,\n  AptosConfig,\n  Network as AptosNetwork,\n  Account,\n} from \"@aptos-labs/ts-sdk\";\n\nimport {\n  Chain,\n  Network,\n  SignAndSendSigner,\n  TxHash,\n  UnsignedTransaction,\n} from \"@wormhole-foundation/sdk\";\nimport {\n  AptosUnsignedTransaction,\n  AptosChains,\n} from \"@wormhole-foundation/sdk-aptos\";\n\nexport class AptosLocalSigner<N extends Network, C extends Chain>\n  implements SignAndSendSigner<N, C>\n{\n  _chain: C;\n  _options: any;\n  _wallet: Account;\n  _sponsorAccount: Account | Partial<Record<AptosNetwork, string>> | undefined;\n  _claimedTransactionHashes: string;\n\n  constructor(\n    chain: C,\n    options: any,\n    wallet: Account,\n    feePayerAccount: Account | Partial<Record<AptosNetwork, string>> | undefined\n  ) {\n    this._chain = chain;\n    this._options = options;\n    this._wallet = wallet;\n    this._sponsorAccount = feePayerAccount;\n    this._claimedTransactionHashes = \"\";\n  }\n\n  chain(): C {\n    return this._chain;\n  }\n  address(): string {\n    return this._wallet.accountAddress.toString();\n  }\n\n  claimedTransactionHashes(): string {\n    return this._claimedTransactionHashes;\n  }\n  /* other methods... */\n\n  async signAndSend(txs: UnsignedTransaction<N, C>[]): Promise<TxHash[]> {\n    console.log(\"Signer signAndSend txs\", txs);\n    const txHashes: TxHash[] = [];\n\n    for (const tx of txs) {\n      const txId = await signAndSendTransaction(\n        tx as AptosUnsignedTransaction<Network, AptosChains>,\n        this._wallet,\n        this._sponsorAccount\n      );\n      txHashes.push(txId);\n      this._claimedTransactionHashes = txId;\n    }\n    return txHashes;\n  }\n}\n\nexport async function signAndSendTransaction(\n  request: UnsignedTransaction<Network, AptosChains>,\n  wallet: Account,\n  sponsorAccount: Account | Partial<Record<AptosNetwork, string>> | undefined\n) {\n  if (!wallet) {\n    throw new Error(\"Wallet is undefined\");\n  }\n\n  const payload = request.transaction;\n  // The wallets do not handle Uint8Array serialization\n  payload.functionArguments = payload.functionArguments.map((a: any) => {\n    if (a instanceof Uint8Array) {\n      return Array.from(a);\n    } else if (typeof a === \"bigint\") {\n      return a.toString();\n    } else {\n      return a;\n    }\n  });\n\n  const aptosConfig = new AptosConfig({\n    network: AptosNetwork.TESTNET,\n  });\n  const aptos = new Aptos(aptosConfig);\n\n  const txnToSign = await aptos.transaction.build.simple({\n    data: payload,\n    sender: wallet.accountAddress.toString(),\n    withFeePayer: sponsorAccount ? true : false,\n  });\n  const senderAuthenticator = await aptos.transaction.sign({\n    signer: wallet,\n    transaction: txnToSign,\n  });\n\n  const txnToSubmit: {\n    transaction: AnyRawTransaction;\n    senderAuthenticator: AccountAuthenticator;\n    feePayerAuthenticator?: AccountAuthenticator;\n  } = {\n    transaction: txnToSign,\n    senderAuthenticator,\n  };\n\n  if (sponsorAccount) {\n    const feePayerSignerAuthenticator = aptos.transaction.signAsFeePayer({\n      // TODO: handles sponsor account coming from gas station\n      signer: sponsorAccount as Account,\n      transaction: txnToSign,\n    });\n    txnToSubmit.feePayerAuthenticator = feePayerSignerAuthenticator;\n  }\n\n  const response = await aptos.transaction.submit.simple(txnToSubmit);\n\n  const tx = await aptos.waitForTransaction({\n    transactionHash: response.hash,\n  });\n\n  return tx.hash;\n}\n","// This function signs and sends the transaction while constantly checking for confirmation\n// and resending the transaction if it hasn't been confirmed after the specified interval\n\nimport {\n  AddressLookupTableAccount,\n  Commitment,\n  ComputeBudgetProgram,\n  ConfirmOptions,\n  LAMPORTS_PER_SOL,\n  SimulatedTransactionResponse,\n  TransactionInstruction,\n  TransactionMessage,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\n\nimport { Transaction } from \"@solana/web3.js\";\nimport { RpcResponseAndContext, SignatureResult } from \"@solana/web3.js\";\nimport {\n  determinePriorityFee,\n  determinePriorityFeeTritonOne,\n  isVersionedTransaction,\n  SolanaUnsignedTransaction,\n} from \"@wormhole-foundation/sdk-solana\";\n\nimport { Connection } from \"@solana/web3.js\";\nimport { Network } from \"@wormhole-foundation/sdk\";\nimport { AdapterWallet } from \"@aptos-labs/wallet-adapter-aggregator-core\";\n\nexport type SolanaRpcProvider = \"triton\" | \"helius\" | \"ankr\" | \"unknown\";\n\n// See https://docs.triton.one/chains/solana/sending-txs for more information\nexport async function signAndSendTransaction(\n  request: SolanaUnsignedTransaction<Network>,\n  wallet: AdapterWallet | undefined,\n  options?: ConfirmOptions\n) {\n  if (!wallet) throw new Error(\"Wallet not found\");\n\n  const commitment = options?.commitment ?? \"finalized\";\n  // Solana rpc should come from dapp config\n  const connection = new Connection(\"https://api.devnet.solana.com\");\n  const { blockhash, lastValidBlockHeight } =\n    await connection.getLatestBlockhash(commitment);\n\n  // Circle Manual CCTP on Wormhole is always of a Trnasaction type\n  // https://github.com/wormhole-foundation/wormhole-sdk-ts/blob/f7d992e04f844edcc4128659f12f75ade3553717/platforms/solana/protocols/cctp/src/circleBridge.ts#L173\n  const transaction = request.transaction.transaction as Transaction;\n\n  /**\n   * TODO: Priority Fee is supported, but needs to come from dapp config\n   */\n  const unsignedTx = await setPriorityFeeInstructions(\n    connection,\n    blockhash,\n    lastValidBlockHeight,\n    request\n  );\n\n  let confirmTransactionPromise: Promise<\n    RpcResponseAndContext<SignatureResult>\n  > | null = null;\n  let confirmedTx: RpcResponseAndContext<SignatureResult> | null = null;\n  let txSendAttempts = 1;\n  let signature = \"\";\n\n  // transaction.recentBlockhash = blockhash;\n  // if (request.transaction.signers) {\n  //   transaction.partialSign(...request.transaction.signers);\n  // }\n\n  const tx = await wallet.signTransaction(unsignedTx);\n  const serializedTx = tx.serialize();\n  const sendOptions = {\n    skipPreflight: true,\n    maxRetries: 0,\n    preFlightCommitment: commitment, // See PR and linked issue for why setting this matters: https://github.com/anza-xyz/agave/pull/483\n  };\n  signature = await connection.sendRawTransaction(serializedTx, sendOptions);\n  confirmTransactionPromise = connection.confirmTransaction(\n    {\n      signature,\n      blockhash,\n      lastValidBlockHeight,\n    },\n    commitment\n  );\n\n  // This loop will break once the transaction has been confirmed or the block height is exceeded.\n  // An exception will be thrown if the block height is exceeded by the confirmTransactionPromise.\n  // The transaction will be resent if it hasn't been confirmed after the interval.\n  const txRetryInterval = 5000;\n  while (!confirmedTx) {\n    confirmedTx = await Promise.race([\n      confirmTransactionPromise,\n      new Promise<null>((resolve) =>\n        setTimeout(() => {\n          resolve(null);\n        }, txRetryInterval)\n      ),\n    ]);\n    if (confirmedTx) {\n      break;\n    }\n    console.log(\n      `Tx not confirmed after ${\n        txRetryInterval * txSendAttempts++\n      }ms, resending`\n    );\n    try {\n      await connection.sendRawTransaction(serializedTx, sendOptions);\n    } catch (e) {\n      console.error(\"Failed to resend transaction:\", e);\n    }\n  }\n\n  if (confirmedTx.value.err) {\n    let errorMessage = `Transaction failed: ${confirmedTx.value.err}`;\n    if (typeof confirmedTx.value.err === \"object\") {\n      try {\n        errorMessage = `Transaction failed: ${JSON.stringify(\n          confirmedTx.value.err,\n          (_key, value) =>\n            typeof value === \"bigint\" ? value.toString() : value // Handle bigint props\n        )}`;\n      } catch (e: unknown) {\n        // Most likely a circular reference error, we can't stringify this error object.\n        // See for more details:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#exceptions\n        errorMessage = `Transaction failed: Unknown error`;\n      }\n    }\n    throw new Error(`Transaction failed: ${errorMessage}`);\n  }\n\n  return signature;\n}\n\nexport async function setPriorityFeeInstructions(\n  connection: Connection,\n  blockhash: string,\n  lastValidBlockHeight: number,\n  request: SolanaUnsignedTransaction<Network>\n): Promise<Transaction | VersionedTransaction> {\n  const unsignedTx = request.transaction.transaction as Transaction;\n\n  const computeBudgetIxFilter = (ix: TransactionInstruction) =>\n    ix.programId.toString() !== \"ComputeBudget111111111111111111111111111111\";\n\n  unsignedTx.recentBlockhash = blockhash;\n  unsignedTx.lastValidBlockHeight = lastValidBlockHeight;\n\n  // Remove existing compute budget instructions if they were added by the SDK\n  unsignedTx.instructions = unsignedTx.instructions.filter(\n    computeBudgetIxFilter\n  );\n  unsignedTx.add(\n    ...(await createPriorityFeeInstructions(connection, unsignedTx))\n  );\n  if (request.transaction.signers) {\n    unsignedTx.partialSign(...request.transaction.signers);\n  }\n\n  return unsignedTx;\n}\n\n// This will throw if the simulation fails\nasync function createPriorityFeeInstructions(\n  connection: Connection,\n  transaction: Transaction | VersionedTransaction,\n  commitment?: Commitment\n) {\n  let unitsUsed = 200_000;\n  let simulationAttempts = 0;\n\n  simulationLoop: while (true) {\n    const response = await connection.simulateTransaction(\n      transaction as Transaction\n    );\n\n    if (response.value.err) {\n      if (checkKnownSimulationError(response.value)) {\n        // Number of attempts will be at most 5 for known errors\n        if (simulationAttempts < 5) {\n          simulationAttempts++;\n          await sleep(1000);\n          continue simulationLoop;\n        }\n      } else if (simulationAttempts < 3) {\n        // Number of attempts will be at most 3 for unknown errors\n        simulationAttempts++;\n        await sleep(1000);\n        continue simulationLoop;\n      }\n\n      // Still failing after multiple attempts for both known and unknown errors\n      // We should throw in that case\n      throw new Error(\n        `Simulation failed: ${JSON.stringify(response.value.err)}\\nLogs:\\n${(\n          response.value.logs || []\n        ).join(\"\\n  \")}`\n      );\n    } else {\n      // Simulation was successful\n      if (response.value.unitsConsumed) {\n        unitsUsed = response.value.unitsConsumed;\n      }\n      break;\n    }\n  }\n\n  const unitBudget = Math.floor(unitsUsed * 1.2); // Budget in 20% headroom\n\n  const instructions: TransactionInstruction[] = [];\n  instructions.push(\n    ComputeBudgetProgram.setComputeUnitLimit({\n      // Set compute budget to 120% of the units used in the simulated transaction\n      units: unitBudget,\n    })\n  );\n\n  // const priorityFeeConfig =\n  //   config.transactionSettings?.Solana?.priorityFee || {};\n\n  // const {\n  //   percentile = 0.9,\n  //   percentileMultiple = 1,\n  //   min = 100_000,\n  //   max = 100_000_000,\n  // } = priorityFeeConfig;\n  const percentile = 0.9;\n  const percentileMultiple = 1;\n  const min = 100_000;\n  const max = 100_000_000;\n\n  const calculateFee = async (\n    rpcProvider?: SolanaRpcProvider\n  ): Promise<{ fee: number; methodUsed: \"triton\" | \"default\" | \"minimum\" }> => {\n    if (rpcProvider === \"triton\") {\n      // Triton has an experimental RPC method that accepts a percentile paramater\n      // and usually gives more accurate fee numbers.\n      try {\n        const fee = await determinePriorityFeeTritonOne(\n          connection,\n          transaction,\n          percentile,\n          percentileMultiple,\n          min,\n          max\n        );\n\n        return {\n          fee,\n          methodUsed: \"triton\",\n        };\n      } catch (e) {\n        console.warn(`Failed to determine priority fee using Triton RPC:`, e);\n      }\n    }\n\n    try {\n      // By default, use generic Solana RPC method\n      const fee = await determinePriorityFee(\n        connection,\n        transaction,\n        percentile,\n        percentileMultiple,\n        min,\n        max\n      );\n\n      return {\n        fee,\n        methodUsed: \"default\",\n      };\n    } catch (e) {\n      console.warn(`Failed to determine priority fee using Triton RPC:`, e);\n\n      return {\n        fee: min,\n        methodUsed: \"minimum\",\n      };\n    }\n  };\n\n  const rpcProvider = determineRpcProvider(connection.rpcEndpoint);\n\n  const { fee, methodUsed } = await calculateFee(rpcProvider);\n\n  const maxFeeInSol =\n    (fee /\n      // convert microlamports to lamports\n      1e6 /\n      // convert lamports to SOL\n      LAMPORTS_PER_SOL) *\n    // multiply by maximum compute units used\n    unitBudget;\n\n  console.table({\n    \"RPC Provider\": rpcProvider,\n    \"Method used\": methodUsed,\n    \"Percentile used\": percentile,\n    \"Multiple used\": percentileMultiple,\n    \"Compute budget\": unitBudget,\n    \"Priority fee\": fee,\n    \"Max fee in SOL\": maxFeeInSol,\n  });\n\n  instructions.push(\n    ComputeBudgetProgram.setComputeUnitPrice({ microLamports: fee })\n  );\n  return instructions;\n}\n\n// Checks response logs for known errors.\n// Returns when the first error is encountered.\nfunction checkKnownSimulationError(\n  response: SimulatedTransactionResponse\n): boolean {\n  const errors = {} as any;\n\n  // This error occur when the blockhash included in a transaction is not deemed to be valid\n  // when a validator processes a transaction. We can retry the simulation to get a valid blockhash.\n  if (response.err === \"BlockhashNotFound\") {\n    errors[\"BlockhashNotFound\"] =\n      \"Blockhash not found during simulation. Trying again.\";\n  }\n\n  // Check the response logs for any known errors\n  if (response.logs) {\n    for (const line of response.logs) {\n      // In some cases which aren't deterministic, like a slippage error, we can retry the\n      // simulation a few times to get a successful response.\n      if (line.includes(\"SlippageToleranceExceeded\")) {\n        errors[\"SlippageToleranceExceeded\"] =\n          \"Slippage failure during simulation. Trying again.\";\n      }\n\n      // In this case a require_gte expression was violated during a Swap instruction.\n      // We can retry the simulation to get a successful response.\n      if (line.includes(\"RequireGteViolated\")) {\n        errors[\"RequireGteViolated\"] =\n          \"Swap instruction failure during simulation. Trying again.\";\n      }\n    }\n  }\n\n  // No known simulation errors found\n  if (isEmptyObject(errors)) {\n    return false;\n  }\n\n  console.table(errors);\n  return true;\n}\n\nexport async function sleep(timeout: number) {\n  return new Promise((resolve) => setTimeout(resolve, timeout));\n}\n\n/**\n * Checks whether an object is empty.\n *\n * isEmptyObject(null)\n * // => true\n *\n * isEmptyObject(undefined)\n * // => true\n *\n * isEmptyObject({})\n * // => true\n *\n * isEmptyObject({ 'a': 1 })\n * // => false\n */\nexport const isEmptyObject = (value: object | null | undefined) => {\n  if (value === null || value === undefined) {\n    return true;\n  }\n\n  // Check all property keys for any own prop\n  for (const key in value) {\n    if (value.hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nfunction determineRpcProvider(endpoint: string): SolanaRpcProvider {\n  if (endpoint.includes(\"rpcpool.com\")) {\n    return \"triton\";\n  } else if (endpoint.includes(\"helius-rpc.com\")) {\n    return \"helius\";\n  } else if (endpoint.includes(\"rpc.ankr.com\")) {\n    return \"ankr\";\n  } else {\n    return \"unknown\";\n  }\n}\n","import {\n  EvmUnsignedTransaction,\n  EvmChains,\n} from \"@wormhole-foundation/sdk-evm\";\nimport { Network } from \"@wormhole-foundation/sdk\";\nimport { getBigInt } from \"ethers\";\nimport { AdapterWallet } from \"@aptos-labs/wallet-adapter-aggregator-core\";\nexport async function signAndSendTransaction(\n  request: EvmUnsignedTransaction<Network, EvmChains>,\n  wallet: AdapterWallet,\n  chainName: string,\n  options: any\n): Promise<string> {\n  if (!wallet || !wallet.sendTransaction) {\n    throw new Error(\"wallet.sendTransaction is undefined\");\n  }\n  // Ensure the signer is connected to the correct chain\n  const actualChainId = await wallet.getConnectedNetwork();\n\n  if (!actualChainId) throw new Error(\"No signer found for chain\" + chainName);\n  const expectedChainId = request.transaction.chainId\n    ? getBigInt(request.transaction.chainId)\n    : undefined;\n\n  if (\n    !actualChainId ||\n    !expectedChainId ||\n    BigInt(actualChainId) !== expectedChainId\n  ) {\n    throw new Error(\n      `Signer is not connected to the right chain. Expected ${expectedChainId}, got ${actualChainId}`\n    );\n  }\n\n  const txHash = await wallet.sendTransaction(request.transaction);\n\n  return txHash;\n}\n","import {\n  SuiChains,\n  SuiUnsignedTransaction,\n} from \"@wormhole-foundation/sdk-sui\";\nimport { Network } from \"@wormhole-foundation/sdk\";\nimport { AdapterWallet } from \"@aptos-labs/wallet-adapter-aggregator-core\";\n\nexport async function signAndSendTransaction(\n  request: SuiUnsignedTransaction<Network, SuiChains>,\n  wallet: AdapterWallet\n): Promise<string> {\n  if (!wallet || !wallet.sendTransaction) {\n    throw new Error(\"wallet.sendTransaction is undefined\");\n  }\n\n  const response = await wallet.sendTransaction({\n    /* @ts-ignore */\n    transactionBlock: request.transaction as TransactionBlock,\n  });\n\n  return response?.id;\n}\n","import {\n  UnsignedTransaction,\n  Network,\n  Chain,\n  TxHash,\n  SignAndSendSigner,\n} from \"@wormhole-foundation/sdk\";\nimport { SolanaUnsignedTransaction } from \"@wormhole-foundation/sdk-solana\";\nimport {\n  SuiChains,\n  SuiUnsignedTransaction,\n} from \"@wormhole-foundation/sdk-sui\";\nimport { AdapterWallet } from \"@aptos-labs/wallet-adapter-aggregator-core\";\nimport {\n  EvmUnsignedTransaction,\n  EvmChains,\n} from \"@wormhole-foundation/sdk-evm\";\n\nimport * as solanaSigner from \"./SolanaSigner\";\nimport * as ethereumSigner from \"./EthereumSigner\";\nimport * as suiSigner from \"./SuiSigner\";\n\nimport { ChainConfig } from \"../config\";\nexport class Signer<N extends Network, C extends Chain>\n  implements SignAndSendSigner<N, C>\n{\n  _chain: ChainConfig;\n  _address: string;\n  _options: any;\n  _wallet: AdapterWallet;\n\n  constructor(\n    chain: ChainConfig,\n    address: string,\n    options: any,\n    wallet: AdapterWallet\n  ) {\n    this._chain = chain;\n    this._address = address;\n    this._options = options;\n    this._wallet = wallet;\n  }\n\n  chain(): C {\n    return this._chain.displayName as C;\n  }\n  address(): string {\n    return this._address;\n  }\n\n  async signAndSend(txs: UnsignedTransaction<N, C>[]): Promise<TxHash[]> {\n    const txHashes: TxHash[] = [];\n\n    for (const tx of txs) {\n      const txId = await signAndSendTransaction(\n        this._chain,\n        tx,\n        this._wallet,\n        this._options\n      );\n      txHashes.push(txId);\n    }\n    return txHashes;\n  }\n}\n\nexport const signAndSendTransaction = async (\n  chain: ChainConfig,\n  request: UnsignedTransaction<Network, Chain>,\n  wallet: AdapterWallet,\n  options: any = {}\n): Promise<string> => {\n  if (!wallet) {\n    throw new Error(\"wallet is undefined\");\n  }\n\n  if (chain.context === \"Solana\") {\n    const signature = await solanaSigner.signAndSendTransaction(\n      request as SolanaUnsignedTransaction<Network>,\n      wallet,\n      options\n    );\n    return signature;\n  } else if (chain.context === \"Ethereum\") {\n    const tx = await ethereumSigner.signAndSendTransaction(\n      request as EvmUnsignedTransaction<Network, EvmChains>,\n      wallet,\n      chain.displayName,\n      options\n    );\n    return tx;\n  } else if (chain.context === \"Sui\") {\n    const tx = await suiSigner.signAndSendTransaction(\n      request as SuiUnsignedTransaction<Network, SuiChains>,\n      wallet\n    );\n    return tx;\n  } else {\n    throw new Error(`Unsupported chain: ${chain}`);\n  }\n};\n","import { Chain, ChainId } from \"@wormhole-foundation/sdk\";\n\nexport enum Context {\n  ETH = \"Ethereum\",\n  TERRA = \"Terra\",\n  XPLA = \"XPLA\",\n  SOLANA = \"Solana\",\n  ALGORAND = \"Algorand\",\n  NEAR = \"Near\",\n  APTOS = \"Aptos\",\n  SUI = \"Sui\",\n  OTHER = \"OTHER\",\n}\n\nexport type BaseChainConfig = {\n  key: Chain;\n  id: ChainId;\n  context: Context;\n  finalityThreshold: number;\n  disabledAsSource?: boolean;\n  disabledAsDestination?: boolean;\n};\n\nexport interface ChainConfig extends BaseChainConfig {\n  sdkName: Chain;\n  displayName: string;\n  explorerUrl: string;\n  explorerName: string;\n  gasToken: string;\n  wrappedGasToken?: string;\n  chainId: number | string;\n  icon: Chain;\n  maxBlockSearch: number;\n  symbol?: string;\n}\n\nexport type ChainsConfig = {\n  [chain in Chain]?: ChainConfig;\n};\n\nexport type TokenConfig = {\n  symbol: string;\n  name?: string;\n  decimals: number;\n  icon: string;\n  tokenId: {\n    chain: Chain;\n    address: string;\n  };\n};\n","import { Context } from \"../types\";\n\nimport { ChainsConfig } from \"../types\";\n\nexport const testnetChains: ChainsConfig = {\n  // Avalanche: {\n  //   key: \"Avalanche\",\n  //   id: 6,\n  //   context: \"Ethereum\",\n  //   finalityThreshold: 1,\n  //   displayName: \"Fuji\",\n  //   explorerUrl: \"https://testnet.avascan.info/blockchain/c/\",\n  //   explorerName: \"Avascan\",\n  //   gasToken: \"AVAX\",\n  //   chainId: 43113,\n  //   icon: \"Avalanche\",\n  //   maxBlockSearch: 2000,\n  //   symbol: \"AVAX\",\n  //   sdkName: \"Avalanche\",\n  //   wrappedGasToken: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n  // },\n  Sepolia: {\n    key: \"Sepolia\",\n    id: 10002,\n    context: Context.ETH,\n    finalityThreshold: 0,\n    displayName: \"Sepolia\",\n    explorerUrl: \"https://sepolia.etherscan.io/\",\n    explorerName: \"Etherscan\",\n    gasToken: \"ETHsepolia\",\n    chainId: 11155111,\n    icon: \"Ethereum\",\n    maxBlockSearch: 2000,\n    symbol: \"ETH\",\n    sdkName: \"Sepolia\",\n    wrappedGasToken: \"0xeef12A83EE5b7161D3873317c8E0E7B76e0B5D9c\",\n  },\n  Solana: {\n    key: \"Solana\",\n    id: 1,\n    context: Context.SOLANA,\n    finalityThreshold: 32,\n    displayName: \"Solana\",\n    explorerUrl: \"https://explorer.solana.com/\",\n    explorerName: \"Solana Explorer\",\n    gasToken: \"SOL\",\n    chainId: 0,\n    icon: \"Solana\",\n    maxBlockSearch: 2000,\n    symbol: \"SOL\",\n    sdkName: \"Solana\",\n    wrappedGasToken: \"So11111111111111111111111111111111111111112\",\n  },\n  // Sui: {\n  //   key: \"Sui\",\n  //   id: 21,\n  //   context: Context.SUI,\n  //   finalityThreshold: 0,\n  //   displayName: \"Sui\",\n  //   explorerUrl: \"https://suiscan.xyz/testnet/\",\n  //   explorerName: \"Suiscan\",\n  //   gasToken: \"SUI\",\n  //   chainId: 0,\n  //   icon: \"Sui\",\n  //   maxBlockSearch: 0,\n  //   symbol: \"SUI\",\n  //   sdkName: \"Sui\",\n  // },\n};\n\nexport const AptosTestnetChain = {\n  key: \"Aptos\",\n  id: 22,\n  context: Context.APTOS,\n  finalityThreshold: 0,\n  displayName: \"Aptos\",\n  explorerUrl: \"https://explorer.aptoslabs.com?network=testnet\",\n  explorerName: \"Aptos Explorer\",\n  gasToken: \"APT\",\n  chainId: 0,\n  icon: \"Aptos\",\n  maxBlockSearch: 0,\n  symbol: \"APT\",\n  sdkName: \"Aptos\",\n};\n","import { TokenConfig } from \"../types\";\n\nexport const testnetTokens: Record<string, TokenConfig> = {\n  Avalanche: {\n    symbol: \"USDC\",\n    icon: \"USDC\",\n    decimals: 6,\n    tokenId: {\n      chain: \"Avalanche\",\n      address: \"0x5425890298aed601595a70AB815c96711a31Bc65\",\n    },\n  },\n  Sepolia: {\n    symbol: \"USDC\",\n    icon: \"USDC\",\n    decimals: 6,\n    tokenId: {\n      chain: \"Sepolia\",\n      address: \"0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238\",\n    },\n  },\n  Solana: {\n    symbol: \"USDC\",\n    tokenId: {\n      chain: \"Solana\",\n      address: \"4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU\",\n    },\n    icon: \"USDC\",\n    decimals: 6,\n  },\n  Sui: {\n    symbol: \"USDC\",\n    tokenId: {\n      chain: \"Sui\",\n      address:\n        \"0xa1ec7fc00a6f40db9693ad1415d0c193ad3906494428cf252621037bd7117e29::usdc::USDC\",\n    },\n    icon: \"USDC\",\n    decimals: 6,\n  },\n};\n\nexport const AptosTestnetUSDCToken: TokenConfig = {\n  symbol: \"USDC\",\n  decimals: 6,\n  tokenId: {\n    chain: \"Aptos\",\n    address:\n      \"0x69091fbab5f7d635ee7ac5098cf0c1efbe31d68fec0f2cd565e8d168daf52832\",\n  },\n  icon: \"USDC\",\n};\n","import { Context } from \"../types\";\n\nimport { ChainsConfig } from \"../types\";\n\nexport const mainnetChains: ChainsConfig = {\n  Ethereum: {\n    key: \"Ethereum\",\n    id: 2,\n    context: Context.ETH,\n    finalityThreshold: 64,\n    displayName: \"Ethereum\",\n    explorerUrl: \"https://etherscan.io/\",\n    explorerName: \"Etherscan\",\n    gasToken: \"ETH\",\n    chainId: 1,\n    icon: \"Ethereum\",\n    maxBlockSearch: 2000,\n    symbol: \"ETH\",\n    sdkName: \"Ethereum\",\n  },\n  Solana: {\n    key: \"Solana\",\n    id: 1,\n    context: Context.SOLANA,\n    finalityThreshold: 32,\n    displayName: \"Solana\",\n    explorerUrl: \"https://explorer.solana.com/\",\n    explorerName: \"Solana Explorer\",\n    gasToken: \"SOL\",\n    chainId: 0,\n    icon: \"Solana\",\n    maxBlockSearch: 2000,\n    symbol: \"SOL\",\n    sdkName: \"Solana\",\n  },\n  // Sui: {\n  //   key: \"Sui\",\n  //   id: 21,\n  //   context: Context.SUI,\n  //   finalityThreshold: 0,\n  //   displayName: \"Sui\",\n  //   sdkName: \"Sui\",\n  //   explorerUrl: \"https://suiscan.xyz/\",\n  //   explorerName: \"Suiscan\",\n  //   gasToken: \"SUI\",\n  //   chainId: 0,\n  //   icon: \"Sui\",\n  //   maxBlockSearch: 0,\n  //   symbol: \"SUI\",\n  // },\n};\n\nexport const AptosMainnetChain = {\n  key: \"Aptos\",\n  id: 22,\n  context: \"Aptos\",\n  finalityThreshold: 0,\n  displayName: \"Aptos\",\n  explorerUrl: \"https://explorer.aptoslabs.com/\",\n  explorerName: \"Aptos Explorer\",\n  gasToken: \"APT\",\n  chainId: 0,\n  icon: \"Aptos\",\n  maxBlockSearch: 0,\n  symbol: \"APT\",\n};\n","import { TokenConfig } from \"../types\";\n\nexport const mainnetTokens: Record<string, TokenConfig> = {\n  Ethereum: {\n    symbol: \"USDC\",\n    tokenId: {\n      chain: \"Ethereum\",\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    },\n    icon: \"USDC\",\n    decimals: 6,\n  },\n  Solana: {\n    symbol: \"USDC\",\n    tokenId: {\n      chain: \"Solana\",\n      address: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    },\n    icon: \"USDC\",\n    decimals: 6,\n  },\n  Sui: {\n    symbol: \"USDC\",\n    decimals: 6,\n    tokenId: {\n      chain: \"Sui\",\n      address:\n        \"0xdba34672e30cb065b1f93e3ab55318768fd6fef66c15942c9f7cb846e2f900e7::usdc::USDC\",\n    },\n    icon: \"USDC\",\n  },\n};\n\nexport const AptosMainnetUSDCToken: TokenConfig = {\n  symbol: \"USDC\",\n  tokenId: {\n    chain: \"Aptos\",\n    address:\n      \"0xbae207659db88bea0cbead6da0ed00aac12edcdda169e591cd41c94180b46f3b\",\n  },\n  icon: \"USDC\",\n  decimals: 6,\n};\n","import { Account, Network } from \"@aptos-labs/ts-sdk\";\n\nimport {\n  WormholeInitiateTransferRequest,\n  WormholeInitiateTransferResponse,\n  WormholeProvider,\n  WormholeQuoteRequest,\n  WormholeQuoteResponse,\n} from \"./providers/wormhole\";\n\nexport interface CrossChainDappConfig {\n  network: Network;\n  disableTelemetry?: boolean;\n}\n\nexport type AptosAccount = Account;\n\nexport type Chain = \"Solana\" | \"Ethereum\" | \"Aptos\";\n\nexport type CCTPProviders = \"Wormhole\";\n\nexport type UsdcBalance = {\n  amount: string;\n  decimal: number;\n  display: string;\n};\n\nexport interface CrossChainProvider<\n  TQuoteRequest = any,\n  TQuoteResponse = any,\n  TInitiateTransferRequest = any,\n  TInitiateTransferResponse = any,\n> {\n  getQuote(params: TQuoteRequest): Promise<TQuoteResponse>;\n  initiateCCTPTransfer(\n    params: TInitiateTransferRequest\n  ): Promise<TInitiateTransferResponse>;\n}\n\nexport class CrossChainCore {\n  readonly _dappConfig: CrossChainDappConfig | undefined;\n\n  constructor(args: { dappConfig: CrossChainDappConfig }) {\n    this._dappConfig = args.dappConfig;\n  }\n\n  getProvider(providerType: CCTPProviders): CrossChainProvider {\n    switch (providerType) {\n      case \"Wormhole\":\n        return new WormholeProvider(this) as CrossChainProvider<\n          WormholeQuoteRequest,\n          WormholeQuoteResponse,\n          WormholeInitiateTransferRequest,\n          WormholeInitiateTransferResponse\n        >;\n      default:\n        throw new Error(`Unknown provider: ${providerType}`);\n    }\n  }\n}\n","export * from \"./CrossChainCore\";\nexport * from \"./providers/wormhole/config\";\nexport * from \"./providers/wormhole/index\";\nexport { Network } from \"@aptos-labs/ts-sdk\";\n"],"mappings":"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","names":["sleep","aptos","signAndSendTransaction","rpcProvider","fee","signAndSendTransaction","signAndSendTransaction","signAndSendTransaction","Context","sleep","Network"]}