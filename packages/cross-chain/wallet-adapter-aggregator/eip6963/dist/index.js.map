{"version":3,"sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["import {\n  APTOS_CHAINS,\n  AptosSignMessageInput,\n  AptosSignMessageOutput,\n  AptosWallet,\n  NetworkInfo,\n  UserResponse,\n  UserResponseStatus,\n  WalletAccount,\n} from \"@aptos-labs/wallet-standard\";\nimport { ethers, TransactionRequest } from \"ethers\";\nimport {\n  AdapterWallet,\n  WalletReadyState,\n  UsdcBalance,\n} from \"@aptos-labs/wallet-adapter-aggregator-core\";\nimport { convertEip6963WalletToAptosWallet } from \"./utils\";\n\nexport type EIP6963ProviderInfo = {\n  info: {\n    uuid: string;\n    name: string;\n    icon: `data:image/svg+xml;base64,${string}`;\n    rdns: string;\n  };\n  provider: any;\n};\n\nexport enum Eip6963Wallets {\n  PhantomWallet = \"Phantom\",\n  MetaMaskWallet = \"MetaMask\",\n  BackpackWallet = \"Backpack\",\n  CoinbaseWallet = \"Coinbase Wallet\",\n  NightlyWallet = \"Nightly\",\n  RabbyWallet = \"Rabby Wallet\",\n}\n\nexport const Eip6963WalletUrls: Record<Eip6963Wallets, string> = {\n  [Eip6963Wallets.PhantomWallet]: \"https://phantom.app/\",\n  [Eip6963Wallets.MetaMaskWallet]: \"https://metamask.io/\",\n  [Eip6963Wallets.BackpackWallet]: \"https://www.backpack.app/\",\n  [Eip6963Wallets.CoinbaseWallet]: \"https://www.coinbase.com/wallet\",\n  [Eip6963Wallets.NightlyWallet]: \"https://nightly.app/\",\n  [Eip6963Wallets.RabbyWallet]: \"https://rabby.io/\",\n};\n\nexport function fetchEthereumWallets(): AdapterWallet[] {\n  const wallets: EIP6963ProviderInfo[] = [];\n  const convertedWallets: AdapterWallet[] = [];\n\n  const handleWalletDiscovery = (event: CustomEvent) => {\n    const wallet = event.detail as EIP6963ProviderInfo;\n\n    // Avoid duplicates\n    if (!wallets.some((w) => w.info.uuid === wallet.info.uuid)) {\n      wallets.push(wallet);\n      convertedWallets.push(\n        new Eip6963Wallet(convertEip6963WalletToAptosWallet(wallet), wallet)\n      );\n    }\n  };\n\n  window.addEventListener(\"eip6963:announceProvider\", (event) => {\n    handleWalletDiscovery(event as CustomEvent);\n  });\n  // Request wallets to announce themselves\n  window.dispatchEvent(new Event(\"eip6963:requestProvider\"));\n\n  return convertedWallets;\n}\n\nexport type Eip6963AccountInfo = {\n  address: string;\n  publicKey: Uint8Array<ArrayBufferLike>;\n};\n\nexport type Eip6963Features = {\n  \"eip6963:connect\": {\n    connect: () => Promise<UserResponse<Eip6963AccountInfo>>;\n    version: string;\n  };\n  \"eip6963:account\": {\n    account: () => Promise<Eip6963AccountInfo>;\n    version: string;\n  };\n  \"eip6963:sendTransaction\": {\n    sendTransaction: (\n      transaction: TransactionRequest,\n      provider: ethers.BrowserProvider\n    ) => Promise<UserResponse<string>>;\n    version: string;\n  };\n  \"eip6963:onAccountChange\": {\n    onAccountChange: (\n      callback: (newAccount: Eip6963AccountInfo) => void\n    ) => void;\n    version: string;\n  };\n};\n\nexport type Eip6963BaseWallet = AptosWallet & {\n  features: Eip6963Features;\n};\n\nexport class Eip6963Wallet extends AdapterWallet<\n  Eip6963AccountInfo,\n  NetworkInfo,\n  Eip6963AccountInfo,\n  AptosSignMessageInput,\n  AptosSignMessageOutput,\n  TransactionRequest,\n  TransactionRequest,\n  Eip6963AccountInfo,\n  NetworkInfo,\n  TransactionRequest,\n  string\n> {\n  readonly eip6963Wallet: Eip6963BaseWallet;\n  readonly eip6963WalletProvider: EIP6963ProviderInfo;\n  readonly version = \"1.0.0\";\n  private provider?: ethers.BrowserProvider;\n\n  accounts: WalletAccount[] = [];\n\n  connected: boolean = false;\n\n  constructor(\n    eip6963Wallet: Eip6963BaseWallet,\n    eip6963WalletProvider: EIP6963ProviderInfo\n  ) {\n    super();\n    this.eip6963Wallet = eip6963Wallet;\n    this.eip6963WalletProvider = eip6963WalletProvider;\n  }\n\n  get icon() {\n    return this.eip6963Wallet.icon;\n  }\n  get name() {\n    return this.eip6963Wallet.name;\n  }\n  get url() {\n    return Eip6963WalletUrls[this.eip6963Wallet.name as Eip6963Wallets];\n  }\n  get readyState() {\n    return WalletReadyState.Installed;\n  }\n  get chains() {\n    return APTOS_CHAINS;\n  }\n\n  get isConnected() {\n    return this.connected;\n  }\n\n  async getAccount() {\n    return await this.eip6963Wallet.features[\"eip6963:account\"].account();\n  }\n\n  async getConnectedNetwork() {\n    return await this.eip6963Wallet.features[\"aptos:network\"].network();\n  }\n\n  async connect() {\n    const result =\n      await this.eip6963Wallet.features[\"eip6963:connect\"].connect();\n    if (result.status === UserResponseStatus.REJECTED) {\n      throw new Error(\"User rejected the request\").message;\n    }\n    await this.onAccountChange();\n    await this.onNetworkChange();\n    this.provider = new ethers.BrowserProvider(\n      (await this.eip6963WalletProvider.provider) as ethers.Eip1193Provider,\n      \"any\"\n    );\n    this.connected = true;\n    return result.args;\n  }\n\n  async disconnect() {\n    try {\n      if (!this.connected) {\n        return;\n      }\n      await this.eip6963Wallet.features[\"aptos:disconnect\"].disconnect();\n      this.connected = false;\n    } catch (error: any) {\n      throw new Error(error).message;\n    }\n  }\n\n  async signMessage(message: AptosSignMessageInput) {\n    const result =\n      await this.eip6963Wallet.features[\"aptos:signMessage\"].signMessage(\n        message\n      );\n    if (result.status === UserResponseStatus.REJECTED) {\n      throw new Error(\"User rejected the request\").message;\n    }\n    return result.args;\n  }\n\n  async signTransaction(\n    transaction: TransactionRequest\n  ): Promise<TransactionRequest> {\n    throw new Error(\"Not implemented\");\n  }\n\n  async sendTransaction(transaction: TransactionRequest): Promise<string> {\n    if (!this.provider) {\n      throw new Error(\"Provider not connected\");\n    }\n    const result = await this.eip6963Wallet.features[\n      \"eip6963:sendTransaction\"\n    ].sendTransaction(transaction, this.provider);\n    if (result.status === UserResponseStatus.REJECTED) {\n      throw new Error(\"User rejected the request\").message;\n    }\n    return result.args;\n  }\n\n  async onAccountChange() {\n    await this.eip6963Wallet.features[\n      \"eip6963:onAccountChange\"\n    ].onAccountChange((account) => {\n      // @ts-ignore-next-line\n      this.emit(\"accountChange\", account);\n    });\n  }\n\n  async onNetworkChange() {\n    await this.eip6963Wallet.features[\"aptos:onNetworkChange\"].onNetworkChange(\n      (newNetwork) => {\n        this.emit(\"networkChange\", newNetwork);\n      }\n    );\n  }\n}\n","import {\n  APTOS_CHAINS,\n  AptosFeatures,\n  AptosOnAccountChangeInput,\n  AptosOnNetworkChangeInput,\n  AptosSignMessageInput,\n  AptosSignMessageOutput,\n  UserResponse,\n  UserResponseStatus,\n} from \"@aptos-labs/wallet-standard\";\nimport { AnyRawTransaction } from \"@aptos-labs/ts-sdk\";\nimport { ethers, TransactionRequest, version } from \"ethers\";\nimport {\n  Eip6963BaseWallet,\n  Eip6963Features,\n  EIP6963ProviderInfo,\n  Eip6963Wallets,\n  Eip6963WalletUrls,\n} from \".\";\n\nexport const convertEip6963WalletToAptosWallet = (\n  eip6963Wallet: EIP6963ProviderInfo\n) => {\n  const wallet: Eip6963BaseWallet = {\n    accounts: [],\n    chains: APTOS_CHAINS,\n    features: {\n      ...APTOS_REQUIRED_FEATURES(eip6963Wallet),\n      ...EIP6963_ADDITIONAL_FEATURES(eip6963Wallet),\n    },\n    icon: eip6963Wallet.info.icon,\n    name: eip6963Wallet.info.name,\n    url: Eip6963WalletUrls[eip6963Wallet.info.name as Eip6963Wallets],\n    version: \"1.0.0\",\n  };\n  return wallet;\n};\n\nconst APTOS_REQUIRED_FEATURES = (\n  eip6963Wallet: EIP6963ProviderInfo\n): AptosFeatures => {\n  return {\n    \"aptos:account\": {\n      account: async () => {\n        throw new Error(\"Not yet implemented\");\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:connect\": {\n      connect: async () => {\n        throw new Error(\"Not yet implemented\");\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:disconnect\": {\n      disconnect: async () => {\n        try {\n          eip6963Wallet.provider.on(\"disconnect\", (error: any) => {\n            console.error(\"EIP-6963 wallet disconnected\", error);\n          });\n        } catch (error) {\n          throw new Error(\"Failed to disconnect\").message;\n        }\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:network\": {\n      network: async () => {\n        const chainId = await eip6963Wallet.provider.request({\n          method: \"eth_chainId\",\n        });\n        /**\n         * The returned chain ID is in hexadecimal, need to convert to decimal.\n         */\n        // TODO: create an internal chainId->name mapping database\n        return { name: parseInt(chainId, 16) as any, chainId };\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:signMessage\": {\n      signMessage: async (message: AptosSignMessageInput) => {\n        const accounts = await eip6963Wallet.provider\n          .request({ method: \"eth_requestAccounts\" })\n          .catch(console.error);\n        const signature = await eip6963Wallet.provider.request({\n          method: \"personal_sign\",\n          params: [message.message, accounts[0]],\n        });\n        const response: AptosSignMessageOutput = {\n          // address?: string;\n          // application?: string;\n          // chainId?: number;\n          fullMessage: message.message,\n          message: message.message,\n          nonce: message.nonce,\n          prefix: \"APTOS\",\n          signature: signature as any,\n        };\n        return {\n          status: UserResponseStatus.APPROVED,\n          args: response,\n        };\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:signTransaction\": {\n      signTransaction: async (transaction: AnyRawTransaction) => {\n        throw new Error(\"Not yet implemented\");\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:onAccountChange\": {\n      onAccountChange: async (callback: AptosOnAccountChangeInput) => {\n        throw new Error(\"Not yet implemented\");\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:onNetworkChange\": {\n      onNetworkChange: async (callback: AptosOnNetworkChangeInput) => {\n        eip6963Wallet.provider.on(\"chainChanged\", (chainId: string) => {\n          console.log(\"chainId\", chainId);\n          callback({\n            // TODO: create an internal chainId->name mapping database\n            name: parseInt(chainId) as any,\n            chainId: parseInt(chainId),\n          });\n        });\n      },\n      version: \"1.0.0\",\n    },\n  };\n};\n\nconst EIP6963_ADDITIONAL_FEATURES = (\n  eip6963Wallet: EIP6963ProviderInfo\n): Eip6963Features => {\n  const features: Eip6963Features = {\n    \"eip6963:account\": {\n      account: async () => {\n        const accounts = await eip6963Wallet.provider\n          .request({ method: \"eth_requestAccounts\" })\n          .catch(console.error);\n        return {\n          address: accounts[0],\n          publicKey: ethers.getBytes(accounts[0]),\n        };\n      },\n      version: \"1.0.0\",\n    },\n    \"eip6963:connect\": {\n      connect: async () => {\n        try {\n          const accounts = await eip6963Wallet.provider\n            .request({ method: \"eth_requestAccounts\" })\n            .catch((error: any) => {\n              throw new Error(\"Error connecting to wallet\" + error).message;\n            });\n\n          return {\n            args: {\n              address: accounts[0],\n              publicKey: ethers.getBytes(accounts[0]),\n            },\n            status: UserResponseStatus.APPROVED,\n          };\n        } catch (error) {\n          if (\n            error instanceof Error &&\n            error.message.includes(\"refused connection\")\n          ) {\n            return {\n              status: UserResponseStatus.REJECTED,\n            };\n          }\n          throw error;\n        }\n      },\n      version: \"1.0.0\",\n    },\n    \"eip6963:sendTransaction\": {\n      sendTransaction: async (\n        transaction: TransactionRequest,\n        provider: ethers.BrowserProvider\n      ): Promise<UserResponse<string>> => {\n        try {\n          const signer = await provider.getSigner();\n          if (!signer) {\n            throw new Error(\"No signer found\");\n          }\n          const response = await signer.sendTransaction(transaction);\n          const receipt = await response.wait();\n          return {\n            status: UserResponseStatus.APPROVED,\n            args: receipt?.hash || \"\",\n          };\n        } catch (error: any) {\n          if (error instanceof Error && error.message.includes(\"rejected\")) {\n            return {\n              status: UserResponseStatus.REJECTED,\n            };\n          }\n          throw new Error(error).message;\n        }\n      },\n      version: \"1.0.0\",\n    },\n    \"eip6963:onAccountChange\": {\n      onAccountChange: async (\n        callback: (newAccount: {\n          address: string;\n          publicKey: Uint8Array<ArrayBufferLike>;\n        }) => void\n      ) => {\n        eip6963Wallet.provider.on(\n          \"accountsChanged\",\n          (accounts: Array<string>) => {\n            const accountInfo = {\n              address: accounts[0],\n              publicKey: ethers.getBytes(accounts[0]),\n            };\n            callback(accountInfo);\n          }\n        );\n      },\n      version: \"1.0.0\",\n    },\n  };\n  return features;\n};\n"],"mappings":"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","names":["Eip6963Wallets","import_wallet_standard","import_ethers","Eip6963Wallets"]}