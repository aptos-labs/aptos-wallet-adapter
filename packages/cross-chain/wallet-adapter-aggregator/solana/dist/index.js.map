{"version":3,"sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["import {\n  AccountInfo,\n  APTOS_CHAINS,\n  AptosSignMessageInput,\n  AptosSignMessageOutput,\n  AptosWallet,\n  NetworkInfo,\n  UserResponse,\n  UserResponseStatus,\n  WalletAccount,\n} from \"@aptos-labs/wallet-standard\";\nimport { isWalletAdapterCompatibleStandardWallet } from \"@solana/wallet-adapter-base\";\nimport { getWallets } from \"@wallet-standard/app\";\nimport { Transaction } from \"@solana/web3.js\";\nimport { StandardWalletAdapter } from \"@solana/wallet-standard-wallet-adapter-base\";\nimport {\n  AdapterWallet,\n  WalletReadyState,\n} from \"@aptos-labs/wallet-adapter-aggregator-core\";\nimport { convertSolanaWalletToAptosWallet } from \"./utils\";\n\nexport type SolanaUnsignedTransaction = Transaction | Transaction[];\nexport type SolanaSignedTransaction = Transaction | Transaction[];\n\nexport function getSolanaStandardWallets(): AdapterWallet[] {\n  // from https://github.com/solana-labs/wallet-standard/blob/c68c26604e0b9624e924292e243df44c742d1c00/packages/wallet-adapter/react/src/useStandardWalletAdapters.ts#L78\n  return getWallets()\n    .get()\n    .filter(isWalletAdapterCompatibleStandardWallet)\n    .map(\n      (wallet) =>\n        new SolanaWallet(\n          convertSolanaWalletToAptosWallet(\n            new StandardWalletAdapter({ wallet })\n          )\n        )\n    );\n}\n\nexport type SolanaFeatures = {\n  \"solana:signTransaction\": {\n    signTransaction: (\n      transaction: Transaction\n    ) => Promise<UserResponse<Transaction>>;\n    version: string;\n  };\n};\n\nexport type SolanaBaseWallet = AptosWallet & {\n  features: SolanaFeatures;\n};\n\nexport class SolanaWallet extends AdapterWallet<\n  AccountInfo,\n  NetworkInfo,\n  AccountInfo,\n  AptosSignMessageInput,\n  AptosSignMessageOutput,\n  Transaction,\n  Transaction,\n  AccountInfo,\n  NetworkInfo\n> {\n  readonly solanaWallet: SolanaBaseWallet;\n  readonly version = \"1.0.0\";\n\n  accounts: WalletAccount[] = [];\n\n  connected: boolean = false;\n\n  constructor(solanaWallet: SolanaBaseWallet) {\n    super();\n    this.solanaWallet = solanaWallet;\n  }\n\n  get icon() {\n    return this.solanaWallet.icon;\n  }\n  get name() {\n    return this.solanaWallet.name;\n  }\n  get url() {\n    return this.solanaWallet.url;\n  }\n\n  get readyState() {\n    return WalletReadyState.Installed;\n  }\n\n  get chains() {\n    return APTOS_CHAINS;\n  }\n\n  get isConnected() {\n    return this.connected;\n  }\n\n  async getAccount(): Promise<AccountInfo> {\n    return await this.solanaWallet.features[\"aptos:account\"].account();\n  }\n\n  async getConnectedNetwork() {\n    return await this.solanaWallet.features[\"aptos:network\"].network();\n  }\n\n  async connect(): Promise<AccountInfo> {\n    const result = await this.solanaWallet.features[\"aptos:connect\"].connect();\n    if (result.status === UserResponseStatus.REJECTED) {\n      throw new Error(\"User rejected the request\").message;\n    }\n    await this.onAccountChange();\n    this.connected = true;\n    return result.args;\n  }\n\n  async disconnect() {\n    if (!this.connected) {\n      return;\n    }\n    await this.solanaWallet.features[\"aptos:disconnect\"].disconnect();\n    this.connected = false;\n  }\n\n  async signMessage(message: AptosSignMessageInput) {\n    const result =\n      await this.solanaWallet.features[\"aptos:signMessage\"].signMessage(\n        message\n      );\n    if (result.status === UserResponseStatus.REJECTED) {\n      throw new Error(\"User rejected the request\").message;\n    }\n    return result.args;\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const result =\n      await this.solanaWallet.features[\n        \"solana:signTransaction\"\n      ].signTransaction(transaction);\n    if (result.status === UserResponseStatus.REJECTED) {\n      throw new Error(\"User rejected\");\n    }\n    return result.args;\n  }\n\n  async onAccountChange() {\n    await this.solanaWallet.features[\"aptos:onAccountChange\"].onAccountChange(\n      async (account: AccountInfo) => {\n        this.emit(\"accountChange\", account);\n      }\n    );\n  }\n\n  async onNetworkChange(\n    callback: (network: NetworkInfo) => void\n  ): Promise<void> {\n    await this.solanaWallet.features[\"aptos:onNetworkChange\"].onNetworkChange(\n      callback\n    );\n  }\n}\n","import {\n  AnyRawTransaction,\n  Ed25519PublicKey,\n  Ed25519Signature,\n} from \"@aptos-labs/ts-sdk\";\nimport {\n  AccountInfo,\n  APTOS_CHAINS,\n  AptosFeatures,\n  AptosOnAccountChangeInput,\n  AptosSignMessageInput,\n  AptosSignMessageOutput,\n  UserResponse,\n  UserResponseStatus,\n} from \"@aptos-labs/wallet-standard\";\n\nimport {\n  PublicKey,\n  PublicKey as SolanaPublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { StandardWalletAdapter } from \"@solana/wallet-standard-wallet-adapter-base\";\nimport { SolanaBaseWallet, SolanaFeatures } from \".\";\nimport { WalletConnectionError } from \"@solana/wallet-adapter-base\";\n\nconst deriveAccountInfoFromSolanaPublicKey = (\n  solanaPublicKey: SolanaPublicKey\n) => {\n  const publicKey = new Ed25519PublicKey(solanaPublicKey.toBytes());\n  const address = publicKey.authKey().derivedAddress();\n  return new AccountInfo({ address, publicKey });\n};\n\nexport const convertSolanaWalletToAptosWallet = (\n  solanaWallet: StandardWalletAdapter\n): SolanaBaseWallet => {\n  const wallet: SolanaBaseWallet = {\n    accounts: [],\n    chains: APTOS_CHAINS,\n    features: {\n      ...APTOS_REQUIRED_FEATURES(solanaWallet),\n      ...SOLANA_ADDITIONAL_FEATURES(solanaWallet),\n    },\n    icon: solanaWallet.icon,\n    name: solanaWallet.name,\n    url: solanaWallet.url,\n    version: \"1.0.0\",\n  };\n  return wallet;\n};\n\nconst APTOS_REQUIRED_FEATURES = (\n  solanaWallet: StandardWalletAdapter\n): AptosFeatures => {\n  return {\n    \"aptos:account\": {\n      account: async () => {\n        if (!solanaWallet.publicKey) {\n          throw new Error(\"Disconnected\");\n        }\n        return deriveAccountInfoFromSolanaPublicKey(solanaWallet.publicKey);\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:connect\": {\n      connect: async () => {\n        try {\n          await solanaWallet.connect();\n          if (!solanaWallet.publicKey) {\n            return { status: UserResponseStatus.REJECTED };\n          }\n\n          return {\n            args: deriveAccountInfoFromSolanaPublicKey(solanaWallet.publicKey),\n            status: UserResponseStatus.APPROVED,\n          };\n        } catch (e) {\n          console.log(\"e\", e);\n          if (e instanceof WalletConnectionError) {\n            return {\n              status: UserResponseStatus.REJECTED,\n            };\n          }\n          throw e;\n        }\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:disconnect\": {\n      disconnect: async () => {\n        try {\n          await solanaWallet.disconnect();\n        } catch (e) {\n          throw new Error(\"Failed to disconnect\");\n        }\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:network\": {\n      network: async () => {\n        throw new Error(\n          \"Fetch network info not supported by Solana wallet adapter\"\n        );\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:signMessage\": {\n      signMessage: async (message: AptosSignMessageInput) => {\n        if (!solanaWallet.signMessage) throw new Error(\"Not supported\");\n        try {\n          const messageToSign = new TextEncoder().encode(message.message);\n          const signature = await solanaWallet.signMessage(messageToSign);\n          const response: AptosSignMessageOutput = {\n            // address?: string;\n            // application?: string;\n            // chainId?: number;\n            fullMessage: message.message,\n            message: message.message,\n            nonce: message.nonce,\n            prefix: \"APTOS\",\n            signature: new Ed25519Signature(signature),\n          };\n          return {\n            status: UserResponseStatus.APPROVED,\n            args: response,\n          };\n        } catch (e) {\n          if (e instanceof Error && e.message.includes(\"rejected\")) {\n            return {\n              status: UserResponseStatus.REJECTED,\n            };\n          }\n          throw e;\n        }\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:signTransaction\": {\n      signTransaction: async (transaction: AnyRawTransaction) => {\n        throw new Error(\"Not yet implemented\");\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:onAccountChange\": {\n      onAccountChange: async (callback: AptosOnAccountChangeInput) => {\n        if (solanaWallet.wallet.features[\"standard:events\"]) {\n          solanaWallet.wallet.features[\"standard:events\"].on(\n            \"change\",\n            (account) => {\n              if (!account.accounts || account.accounts.length === 0) {\n                return;\n              }\n              const accountInfo = deriveAccountInfoFromSolanaPublicKey(\n                new PublicKey(account.accounts[0].publicKey)\n              );\n              callback(accountInfo);\n            }\n          );\n        }\n      },\n      version: \"1.0.0\",\n    },\n    \"aptos:onNetworkChange\": {\n      onNetworkChange: async () => {\n        throw new Error(\n          \"onNetworkChange not yet implemented in solana wallet adapter\"\n        );\n      },\n      version: \"1.0.0\",\n    },\n  };\n};\n\nconst SOLANA_ADDITIONAL_FEATURES = (\n  solanaWallet: StandardWalletAdapter\n): SolanaFeatures => {\n  return {\n    \"solana:signTransaction\": {\n      signTransaction: async (\n        transaction: Transaction\n      ): Promise<UserResponse<Transaction>> => {\n        if (!solanaWallet.signTransaction) throw new Error(\"Not supported\");\n        try {\n          const signature = await solanaWallet.signTransaction(transaction);\n          return {\n            status: UserResponseStatus.APPROVED,\n            args: signature,\n          };\n        } catch (e) {\n          if (e instanceof Error && e.message.includes(\"rejected\")) {\n            return {\n              status: UserResponseStatus.REJECTED,\n            };\n          }\n          throw e;\n        }\n      },\n      version: \"1.0.0\",\n    },\n  };\n};\n"],"mappings":"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","names":["import_wallet_standard","import_wallet_adapter_base"]}