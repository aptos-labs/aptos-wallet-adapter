{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import EventEmitter from \"eventemitter3\";\nimport {\n  AccountInfo,\n  NetworkInfo,\n  WalletAccount,\n} from \"@aptos-labs/wallet-standard\";\n\nexport type UsdcBalance = {\n  amount: string;\n  decimal: number;\n  display: string;\n};\n\nexport enum WalletReadyState {\n  /**\n   * Wallet can only be in one of two states - installed or not installed\n   * Installed: wallets are detected by the browser event listeners and means they are installed on the user's browser.\n   * NotDetected: wallets are not detected by the browser event listeners and means they are not installed on the user's browser.\n   */\n  Installed = \"Installed\",\n  NotDetected = \"NotDetected\",\n}\n\nexport declare interface WalletEvents {\n  connect(account: AccountInfo | null): void;\n  disconnect(): void;\n  networkChange(network: NetworkInfo | null): void;\n  accountChange(account: AccountInfo | null): void;\n}\n\nexport abstract class AdapterWallet<\n  GetAccountOutput = any,\n  GetConnectedNetworkOutput = any,\n  ConnectOutput = any,\n  SignMessageInput = any,\n  SignMessageOutput = any,\n  SignTransactionInput = any,\n  SignTransactionOutput = any,\n  OnAccountChangeInput = any,\n  OnNetworkChangeInput = any,\n  SendTransactionInput = any,\n  SendTransactionOutput = any,\n> extends EventEmitter<WalletEvents> {\n  abstract readonly version: \"1.0.0\";\n  abstract accounts: WalletAccount[];\n  abstract get name(): string;\n  abstract get icon(): any;\n  abstract get url(): string;\n  abstract get readyState(): WalletReadyState;\n\n  abstract getAccount(): Promise<GetAccountOutput>;\n  abstract getConnectedNetwork(): Promise<GetConnectedNetworkOutput>;\n  abstract connect(): Promise<ConnectOutput>;\n  abstract disconnect(): Promise<void>;\n  abstract signMessage(message: SignMessageInput): Promise<SignMessageOutput>;\n  abstract signTransaction(\n    transaction: SignTransactionInput\n  ): Promise<SignTransactionOutput>;\n  abstract onAccountChange(\n    callback: (account: OnAccountChangeInput) => void\n  ): void;\n  abstract onNetworkChange(\n    callback: (network: OnNetworkChangeInput) => void\n  ): void;\n  sendTransaction?(\n    transaction: SendTransactionInput\n  ): Promise<SendTransactionOutput> {\n    throw new Error(\"Not implemented\");\n  }\n  getAccountUsdcBalance?(): Promise<UsdcBalance> {\n    throw new Error(\"Not implemented\");\n  }\n}\n"],"mappings":";AAAA,OAAO,kBAAkB;AAalB,IAAK,mBAAL,kBAAKA,sBAAL;AAML,EAAAA,kBAAA,eAAY;AACZ,EAAAA,kBAAA,iBAAc;AAPJ,SAAAA;AAAA,GAAA;AAiBL,IAAe,gBAAf,cAYG,aAA2B;AAAA,EAsBnC,gBACE,aACgC;AAChC,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAAA,EACA,wBAA+C;AAC7C,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AACF;","names":["WalletReadyState"]}