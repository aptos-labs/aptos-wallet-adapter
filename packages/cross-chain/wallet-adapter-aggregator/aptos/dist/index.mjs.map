{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {\n  AdapterWallet,\n  WalletReadyState,\n} from \"@aptos-labs/wallet-adapter-aggregator-core\";\nimport {\n  AccountInfo,\n  NetworkInfo,\n  WalletCore,\n  AdapterWallet as AptosBaseWallet,\n  AnyRawTransaction,\n  InputTransactionData,\n  AccountAuthenticator,\n} from \"@aptos-labs/wallet-adapter-core\";\nimport {\n  APTOS_CHAINS,\n  AptosSignMessageInput,\n  AptosSignMessageOutput,\n  WalletAccount,\n} from \"@aptos-labs/wallet-standard\";\n\nexport const getAptosWallets = (): AptosWallet[] => {\n  const walletCore = new WalletCore();\n  const wallets = walletCore.wallets.map(\n    (wallet) => new AptosWallet(wallet, walletCore)\n  );\n  return wallets;\n};\n\nexport class AptosWallet extends AdapterWallet<\n  AccountInfo,\n  NetworkInfo,\n  AccountInfo | null,\n  AptosSignMessageInput,\n  AptosSignMessageOutput,\n  {\n    transactionOrPayload: AnyRawTransaction | InputTransactionData;\n    asFeePayer?: boolean;\n  },\n  {\n    authenticator: AccountAuthenticator;\n    rawTransaction: Uint8Array;\n  },\n  AccountInfo,\n  NetworkInfo\n> {\n  readonly aptosWallet: AptosBaseWallet;\n  readonly walletCore: WalletCore;\n  readonly version = \"1.0.0\";\n\n  accounts: WalletAccount[] = [];\n\n  connected: boolean = false;\n\n  constructor(aptosWallet: AptosBaseWallet, walletCore: WalletCore) {\n    super();\n    this.aptosWallet = aptosWallet;\n    this.walletCore = walletCore;\n  }\n\n  get icon() {\n    return this.aptosWallet.icon;\n  }\n  get name() {\n    return this.aptosWallet.name;\n  }\n  get url() {\n    return this.aptosWallet.url;\n  }\n\n  get readyState() {\n    return WalletReadyState.Installed;\n  }\n\n  get chains() {\n    return APTOS_CHAINS;\n  }\n\n  get isConnected() {\n    return this.connected;\n  }\n\n  async getAccount(): Promise<AccountInfo> {\n    const account = await this.walletCore.account;\n    if (!account) {\n      throw new Error(\"Account not found\");\n    }\n    return account;\n  }\n\n  async getConnectedNetwork(): Promise<NetworkInfo> {\n    const network = await this.walletCore.network;\n    if (!network) {\n      throw new Error(\"Network not found\");\n    }\n    return network;\n  }\n\n  async connect(): Promise<AccountInfo | null> {\n    await this.walletCore.connect(this.name);\n    this.onAccountChange();\n    this.connected = true;\n    return this.walletCore.account;\n  }\n\n  async disconnect() {\n    if (!this.connected) {\n      return;\n    }\n    this.walletCore.off(\"accountChange\");\n    await this.walletCore.disconnect();\n    this.connected = false;\n  }\n\n  async signMessage(message: AptosSignMessageInput) {\n    const result = await this.walletCore.signMessage(message);\n    return result;\n  }\n\n  async signTransaction(args: {\n    transactionOrPayload: AnyRawTransaction | InputTransactionData;\n    asFeePayer?: boolean;\n  }): Promise<{\n    authenticator: AccountAuthenticator;\n    rawTransaction: Uint8Array;\n  }> {\n    const result = await this.walletCore.signTransaction(args);\n    return result;\n  }\n\n  onAccountChange() {\n    this.walletCore.onAccountChange();\n    this.walletCore.on(\n      \"accountChange\",\n      async (accountInfo: AccountInfo | null) => {\n        this.emit(\"accountChange\", accountInfo);\n      }\n    );\n  }\n\n  async onNetworkChange(\n    callback: (network: NetworkInfo) => void\n  ): Promise<void> {\n    await this.walletCore.onNetworkChange();\n  }\n}\n"],"mappings":";AAAA;AAAA,EACE;AAAA,EACA;AAAA,OACK;AACP;AAAA,EAGE;AAAA,OAKK;AACP;AAAA,EACE;AAAA,OAIK;AAEA,IAAM,kBAAkB,MAAqB;AAClD,QAAM,aAAa,IAAI,WAAW;AAClC,QAAM,UAAU,WAAW,QAAQ;AAAA,IACjC,CAAC,WAAW,IAAI,YAAY,QAAQ,UAAU;AAAA,EAChD;AACA,SAAO;AACT;AAEO,IAAM,cAAN,cAA0B,cAgB/B;AAAA,EASA,YAAY,aAA8B,YAAwB;AAChE,UAAM;AAPR,SAAS,UAAU;AAEnB,oBAA4B,CAAC;AAE7B,qBAAqB;AAInB,SAAK,cAAc;AACnB,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,IAAI,OAAO;AACT,WAAO,KAAK,YAAY;AAAA,EAC1B;AAAA,EACA,IAAI,OAAO;AACT,WAAO,KAAK,YAAY;AAAA,EAC1B;AAAA,EACA,IAAI,MAAM;AACR,WAAO,KAAK,YAAY;AAAA,EAC1B;AAAA,EAEA,IAAI,aAAa;AACf,WAAO,iBAAiB;AAAA,EAC1B;AAAA,EAEA,IAAI,SAAS;AACX,WAAO;AAAA,EACT;AAAA,EAEA,IAAI,cAAc;AAChB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,aAAmC;AACvC,UAAM,UAAU,MAAM,KAAK,WAAW;AACtC,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACrC;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,sBAA4C;AAChD,UAAM,UAAU,MAAM,KAAK,WAAW;AACtC,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACrC;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,UAAuC;AAC3C,UAAM,KAAK,WAAW,QAAQ,KAAK,IAAI;AACvC,SAAK,gBAAgB;AACrB,SAAK,YAAY;AACjB,WAAO,KAAK,WAAW;AAAA,EACzB;AAAA,EAEA,MAAM,aAAa;AACjB,QAAI,CAAC,KAAK,WAAW;AACnB;AAAA,IACF;AACA,SAAK,WAAW,IAAI,eAAe;AACnC,UAAM,KAAK,WAAW,WAAW;AACjC,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,MAAM,YAAY,SAAgC;AAChD,UAAM,SAAS,MAAM,KAAK,WAAW,YAAY,OAAO;AACxD,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,gBAAgB,MAMnB;AACD,UAAM,SAAS,MAAM,KAAK,WAAW,gBAAgB,IAAI;AACzD,WAAO;AAAA,EACT;AAAA,EAEA,kBAAkB;AAChB,SAAK,WAAW,gBAAgB;AAChC,SAAK,WAAW;AAAA,MACd;AAAA,MACA,OAAO,gBAAoC;AACzC,aAAK,KAAK,iBAAiB,WAAW;AAAA,MACxC;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,gBACJ,UACe;AACf,UAAM,KAAK,WAAW,gBAAgB;AAAA,EACxC;AACF;","names":[]}