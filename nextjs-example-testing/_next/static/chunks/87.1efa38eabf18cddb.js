"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[87],{79087:function(e,t,r){r.r(t),r.d(t,{AptosWormholeCore:function(){return i}});var n=r(87981),o=r(13858),s=r(82568),a=r(56178);class i{network;chain;connection;contracts;chainId;coreBridge;constructor(e,t,r,n){this.network=e,this.chain=t,this.connection=r,this.contracts=n,this.chainId=(0,o.Vn)(t);let s=n.coreBridge;if(!s)throw Error(`CoreBridge contract Address for chain ${t} not found`);this.coreBridge=s}getGuardianSet(e){throw Error("Method not implemented.")}getGuardianSetIndex(){throw Error("Method not implemented.")}getMessageFee(){throw Error("Method not implemented.")}static async fromRpc(e,t){let[r,n]=await a.O.chainFromRpc(e),o=t[n];if(o.network!==r)throw Error(`Network mismatch: ${o.network} !== ${r}`);return new i(r,n,e,o.contracts)}async *publishMessage(e,t){throw Error("Method not implemented.")}async *verifyMessage(e,t){throw Error("Not implemented.")}async parseTransaction(e){return(await this.parseMessages(e)).map(e=>({chain:e.emitterChain,emitter:e.emitterAddress,sequence:e.sequence}))}async parseMessages(e){let t=await this.connection.getTransactionByHash({transactionHash:e});if("user_transaction"!==t.type)throw Error(`${e} is not a user_transaction`);let r=t.events.filter(e=>e.type.endsWith("WormholeMessage"));if(!r||0===r.length)throw Error(`WormholeMessage not found for ${e}`);return r.map(e=>{let t=e.data,r=new n.Vf(BigInt(t.sender).toString(16).padStart(64,"0"));return(0,n.oN)("Uint8Array",{guardianSet:0,emitterChain:this.chain,emitterAddress:r,sequence:BigInt(t.sequence),timestamp:Number(t.timestamp),consistencyLevel:t.consistency_level,nonce:Number(t.nonce),signatures:[],payload:s.$v.decode(t.payload)})})}}(0,n.sW)("Aptos","WormholeCore",i)}}]);