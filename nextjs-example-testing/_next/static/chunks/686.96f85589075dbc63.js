"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[686],{5686:function(e,t,r){r.r(t),r.d(t,{SuiWormholeCore:function(){return i}});var n=r(52571),s=r(29632),o=r(34138),a=r(84537);class i{network;chain;provider;contracts;chainId;coreBridgePackageId;constructor(e,t,r,n){this.network=e,this.chain=t,this.provider=r,this.contracts=n,this.chainId=(0,s.Vn)(t);let o=n.coreBridge;if(!o)throw Error(`CoreBridge contract Address for chain ${t} not found`);this.coreBridgePackageId=o}getGuardianSet(e){throw Error("Method not implemented.")}getMessageFee(){throw Error("Method not implemented.")}static async fromRpc(e,t){let[r,n]=await o.$.chainFromRpc(e),s=t[n];if(s.network!==r)throw Error(`Network mismatch: ${s.network} !== ${r}`);return new i(r,n,e,s.contracts)}async *verifyMessage(e,t){throw Error("Method not implemented.")}async *publishMessage(e,t){throw Error("Method not implemented.")}async parseTransaction(e){return(await this.parseMessages(e)).map(e=>({emitter:e.emitterAddress,sequence:e.sequence,chain:this.chain}))}async getGuardianSetIndex(){throw Error("Method not implemented.")}async parseMessages(e){let t=await this.provider.getTransactionBlock({digest:e,options:{showEvents:!0,showEffects:!0,showInput:!0}}),r=t.events?.filter(e=>e.type.endsWith("WormholeMessage"));if(!r||0==r.length)throw Error("WormholeMessage not found");return r.map(e=>{let t=e.parsedJson;return(0,n.oN)("Uint8Array",{emitterChain:this.chain,emitterAddress:new a.Ne(t.sender).toUniversalAddress(),sequence:BigInt(t.sequence),guardianSet:0,timestamp:Number(t.timestamp),consistencyLevel:t.consistency_level,nonce:t.nonce,signatures:[],payload:new Uint8Array(t.payload)})})}}(0,n.sW)("Sui","WormholeCore",i)}}]);