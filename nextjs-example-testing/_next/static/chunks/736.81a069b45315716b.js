"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[736],{23736:function(e,t,s){s.r(t),s.d(t,{SuiCircleBridge:function(){return h}});var r=s(52571),a=s(67986),n=s(34138),i=s(36963),o=s(15899),c=s(20525),d=s(49332);let m=(0,s(82198).J)([["Testnet",{tokenMessengerState:"0x5252abd1137094ed1db3e0d75bc36abcd287aee4bc310f8e047727ef5682e7c2",messageTransmitterState:"0x98234bd0fa9ac12cc0a20a144a22e36d6a32f7e0a97baaeaf9c76cdc6d122d2e",usdcTreasury:"0x7170137d4a6431bf83351ac025baf462909bffe2877d87716374fb42b9629ebe"}],["Mainnet",{tokenMessengerState:"0x45993eecc0382f37419864992c12faee2238f5cfe22b98ad3bf455baf65c8a2f",messageTransmitterState:"0xf68268c3d9b1df3215f2439400c1c4ea08ac4ef4bb7d6f3ca6a2a239e17510af",usdcTreasury:"0x57d6725e7a8b49a7b2a612f6bd66ab5f39fc95332ca48be421c3229d514a6de7"}]],[0,1]);class h{network;chain;provider;contracts;usdcId;usdcTreasuryId;tokenMessengerId;tokenMessengerStateId;messageTransmitterId;messageTransmitterStateId;constructor(e,t,s,r){if(this.network=e,this.chain=t,this.provider=s,this.contracts=r,"Devnet"===e)throw Error("CircleBridge not supported on Devnet");let a=c.UO.get(this.network,this.chain);if(!a)throw Error(`No USDC contract configured for network=${this.network} chain=${this.chain}`);let{tokenMessengerState:n,messageTransmitterState:i,usdcTreasury:o}=m(e);if(!r.cctp?.tokenMessenger)throw Error(`Circle Token Messenger contract for domain ${t} not found`);if(!r.cctp?.messageTransmitter)throw Error(`Circle Message Transmitter contract for domain ${t} not found`);this.usdcId=a,this.usdcTreasuryId=o,this.tokenMessengerId=r.cctp?.tokenMessenger,this.messageTransmitterId=r.cctp?.messageTransmitter,this.tokenMessengerStateId=n,this.messageTransmitterStateId=i}async *transfer(e,t,s){let r=new a.a,i=c.vw.get(this.network,t.chain),[o,...d]=await n.$.getCoins(this.provider,e,this.usdcId);if(void 0===o)throw Error("No USDC in wallet");let m=r.object(o.coinObjectId);d.length>0&&r.mergeCoins(m,d.map(e=>r.object(e.coinObjectId)));let[h]=r.splitCoins(m,[s]);r.moveCall({target:`${this.tokenMessengerId}::deposit_for_burn::deposit_for_burn`,arguments:[h,r.pure.u32(i),r.pure.address(t.address.toUniversalAddress().toString()),r.object(this.tokenMessengerStateId),r.object(this.messageTransmitterStateId),r.object("0x403"),r.object(this.usdcTreasuryId)],typeArguments:[this.usdcId]}),yield this.createUnsignedTx(r,"Sui.CircleBridge.Transfer")}async isTransferCompleted(e){let t=new a.a;t.moveCall({target:`${this.messageTransmitterId}::state::is_nonce_used`,arguments:[t.object(this.messageTransmitterStateId),t.pure.u32(e.sourceDomain),t.pure.u64(e.nonce)]});let s=await this.provider.devInspectTransactionBlock({sender:"0x0000000000000000000000000000000000000000000000000000000000000000",transactionBlock:t});try{return!!s.results[0].returnValues[0][0][0]}catch(e){return console.error(`Error reading if nonce was used: ${e}`),!1}}async *redeem(e,t,s){let n=new a.a,[o]=n.moveCall({target:`${this.messageTransmitterId}::receive_message::receive_message`,arguments:[n.pure((0,i.jd)(r.iC.serialize(t))),n.pure((0,i.jd)(d.$v.decode(s))),n.object(this.messageTransmitterStateId)]});if(!o)throw Error("Failed to produce receipt");let[c]=n.moveCall({target:`${this.tokenMessengerId}::handle_receive_message::handle_receive_message`,arguments:[o,n.object(this.tokenMessengerStateId),n.object("0x403"),n.object(this.usdcTreasuryId)],typeArguments:[this.usdcId]});if(!c)throw Error("Failed to produce stamp receipt ticket with burn message");let[m]=n.moveCall({target:`${this.tokenMessengerId}::handle_receive_message::deconstruct_stamp_receipt_ticket_with_burn_message`,arguments:[c]});if(!m)throw Error("Failed to produce stamp receipt ticket");let[h]=n.moveCall({target:`${this.messageTransmitterId}::receive_message::stamp_receipt`,arguments:[m,n.object(this.messageTransmitterStateId)],typeArguments:[`${this.tokenMessengerId}::message_transmitter_authenticator::MessageTransmitterAuthenticator`]});if(!h)throw Error("Failed to produce stamped receipt");n.moveCall({target:`${this.messageTransmitterId}::receive_message::complete_receive_message`,arguments:[h,n.object(this.messageTransmitterStateId)]}),yield this.createUnsignedTx(n,"Sui.CircleBridge.Redeem")}async parseTransactionDetails(e){let t=await this.provider.waitForTransactionBlock({digest:e,options:{showEvents:!0,showEffects:!0,showInput:!0}});if(!t)throw Error("Transaction not found");if(!t.events)throw Error("Transaction events not found");let s=t.events?.find(e=>e.type.includes("send_message::MessageSent"));if(!s)throw Error("No MessageSent event found");let a=new Uint8Array((s?.parsedJson).message),[n,i]=r.iC.deserialize(a),{payload:o}=n,d=o.messageSender,m=o.mintRecipient,h=c.yN(this.network,n.sourceDomain),u=c.yN(this.network,n.destinationDomain),g={chain:h,address:o.burnToken};return{from:{chain:h,address:d},to:{chain:u,address:m},token:g,amount:o.amount,message:n,id:{hash:i}}}static async fromRpc(e,t){let[s,r]=await n.$.chainFromRpc(e),a=t[r];if(a.network!==s)throw Error(`Network mismatch: ${a.network} != ${s}`);return new h(s,r,e,a.contracts)}createUnsignedTx(e,t,s=!1){return new o.A(e,this.network,this.chain,t,s)}}(0,r.sW)("Sui","CircleBridge",h)},15899:function(e,t,s){s.d(t,{A:function(){return r}});class r{transaction;network;chain;description;parallelizable;constructor(e,t,s,r,a=!1){this.transaction=e,this.network=t,this.chain=s,this.description=r,this.parallelizable=a}}}}]);